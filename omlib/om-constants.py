# This file was automatically generated on 12/12/2019, 18:09:39.

import rdflib
from omlib.constants import OM_IDS
from rdflib import URIRef, Literal
from omlib.dimension import Dimension
from omlib.scale import Scale
from omlib.unit import Prefix, Unit

class OM:
    NAMESPACE = OM_IDS.NAMESPACE
    
    kelvin = Unit.get_singular_unit([Literal('kelvin', lang='en'), Literal('开', lang='zh'), Literal('kelvin', lang='nl')], Literal('K'), Dimension(0, 0, 0, 0, 1, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kelvin')
    SouthAfricanRand = Unit.get_singular_unit([Literal('南非兰特', lang='zh'), Literal('South African rand', lang='en')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/SouthAfricanRand')
    SouthKoreanWon = Unit.get_singular_unit([Literal('韩元', lang='zh'), Literal('South Korean won', lang='en')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/SouthKoreanWon')
    AFS = Unit.get_singular_unit(Literal('AFS', lang='en'), None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/AFS')
    HongKongDollar = Unit.get_singular_unit([Literal('港元', lang='zh'), Literal('Hong Kong dollar', lang='en')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/HongKongDollar')
    ChineseYuan = Unit.get_singular_unit([Literal('Chinese yuan', lang='en'), Literal('中国元', lang='zh')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/ChineseYuan')
    NewZealandDollar = Unit.get_singular_unit([Literal('New Zealand dollar', lang='en'), Literal('新西兰美元', lang='zh')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/NewZealandDollar')
    CanadianDollar = Unit.get_singular_unit([Literal('Canadian dollar', lang='en'), Literal('加元', lang='zh')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/CanadianDollar')
    JapaneseYen = Unit.get_singular_unit([Literal('日元', lang='zh'), Literal('Japanese yen', lang='en')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/JapaneseYen')
    _110 = Unit.get_singular_unit([Literal('1-10', lang='nl'), Literal('1-10', lang='en')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/_1-10')
    month = Unit.get_singular_unit([Literal('month', lang='en'), Literal('maand', lang='nl'), Literal('月', lang='zh')], None, Dimension(1, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/month')
    AustralianDollar = Unit.get_singular_unit([Literal('Australian dollar', lang='en'), Literal('澳元', lang='zh')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/AustralianDollar')
    IndianRupee = Unit.get_singular_unit([Literal('Indian rupee', lang='en'), Literal('印度卢比', lang='zh')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/IndianRupee')
    InternationalUnit = Unit.get_singular_unit([Literal('International Unit', lang='en'), Literal('国际单位', lang='zh')], Literal('IU'), Dimension(0, 0, 1, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/InternationalUnit')
    candela = Unit.get_singular_unit([Literal('candela', lang='en'), Literal('candela', lang='nl'), Literal('坎德拉', lang='zh')], Literal('cd'), Dimension(0, 0, 0, 0, 0, 0, 1), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/candela')
    mole = Unit.get_singular_unit([Literal('mole', lang='en'), Literal('mol', lang='nl')], Literal('mol'), Dimension(0, 0, 0, 0, 0, 1, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/mole')
    NorwegianKrone = Unit.get_singular_unit([Literal('Norwegian krone', lang='en'), Literal('挪威克朗', lang='zh')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/NorwegianKrone')
    metre = Unit.get_singular_unit([Literal('metre', lang='en'), Literal('米', lang='zh'), Literal('meter', lang='nl')], Literal('m'), Dimension(0, 1, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metre')
    milligramRAE = Unit.get_singular_unit(Literal('milligram RAE', lang='en'), None, Dimension(0, 0, 1, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milligramRAE')
    SwedishKrona = Unit.get_singular_unit([Literal('瑞典克朗', lang='zh'), Literal('Swedish krona', lang='en')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/SwedishKrona')
    RussianRuble = Unit.get_singular_unit([Literal('俄罗斯卢布', lang='zh'), Literal('RussianRuble', lang='en')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/RussianRuble')
    BrazilianReal = Unit.get_singular_unit([Literal('巴西里拉', lang='zh'), Literal('Brazilian real', lang='en')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/BrazilianReal')
    SwissFranc = Unit.get_singular_unit([Literal('Swiss franc', lang='en'), Literal('瑞士法郎', lang='zh')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/SwissFranc')
    pointDidot = Unit.get_singular_unit(Literal('point (Didot)', lang='en'), Literal('pt'), base_unit=metre, factor=0.0003759, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/point-Didot')
    MexicanPeso = Unit.get_singular_unit([Literal('Mexican peso', lang='en'), Literal('墨西哥比索', lang='zh')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/MexicanPeso')
    _15 = Unit.get_singular_unit([Literal('1-5', lang='en'), Literal('1-5', lang='nl')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/_1-5')
    rodUS = Unit.get_singular_unit(Literal('rod (US)', lang='en'), Literal('rd'), base_unit=metre, factor=5.02921, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/rod-US')
    one = Unit.get_singular_unit(Literal('one', lang='en'), Literal('1'), Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/one')
    astronomicalUnit = Unit.get_singular_unit(Literal('astronomical unit', lang='en'), Literal('AU'), base_unit=metre, factor=149597870700.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/astronomicalUnit')
    colonyFormingUnit = Unit.get_singular_unit(Literal('colony forming unit', lang='en'), Literal('CFU'), Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/colonyFormingUnit')
    degreeRankine = Unit.get_singular_unit([Literal('graad Rankine', lang='nl'), Literal('degree Rankine', lang='en')], Literal('°R'), base_unit=kelvin, factor=0.5555556, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/degreeRankine')
    inchInternational = Unit.get_singular_unit([Literal('inch (international)', lang='en'), Literal('英寸（国际）', lang='zh')], Literal('in'), base_unit=metre, factor=0.0254, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/inch-International')
    baud = Unit.get_singular_unit([Literal('baud', lang='nl'), Literal('baud', lang='en')], Literal('Bd'), Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/baud')
    poundSterling = Unit.get_singular_unit([Literal('英镑', lang='zh'), Literal('pound sterling', lang='en')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/poundSterling')
    footInternational = Unit.get_singular_unit([Literal('英尺（国际）', lang='zh'), Literal('foot (international)', lang='en')], Literal('ft'), base_unit=metre, factor=0.3048, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/foot-International')
    magnitude = Unit.get_singular_unit([Literal('magnitude', lang='en'), Literal('magnitude', lang='nl')], Literal('mag'), base_unit=one, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/magnitude')
    SingaporeDollar = Unit.get_singular_unit([Literal('Singapore dollar', lang='en'), Literal('新加坡元', lang='zh')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/SingaporeDollar')
    _05 = Unit.get_singular_unit([Literal('0-5', lang='en'), Literal('0-5', lang='nl')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/_0-5')
    parsec = Unit.get_singular_unit(Literal('parsec', lang='en'), Literal('pc'), base_unit=metre, factor=3.08567758149137e+16, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/parsec')
    pointATA = Unit.get_singular_unit(Literal('point (ATA)', lang='en'), Literal('pt'), base_unit=metre, factor=0.0003514598, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/point-ATA')
    _10 = Unit.get_singular_unit([Literal('1/0', lang='en'), Literal('1/0', lang='nl')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/_1-0')
    TurkishLira = Unit.get_singular_unit([Literal('土耳其里拉', lang='zh'), Literal('Turkish lira', lang='en')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/TurkishLira')
    degreeCelsius = Unit.get_singular_unit([Literal('摄氏度', lang='zh'), Literal('graad Celsius', lang='nl'), Literal('degree Celsius', lang='en')], Literal('°C'), base_unit=kelvin, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/degreeCelsius')
    amylaseUnit = Unit.get_singular_unit(Literal('amylase unit', lang='en'), Literal('AU'), Dimension(-1, 0, 0, 0, 0, 1, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/amylaseUnit')
    metreKelvin = Unit.get_unit_multiplication(metre, kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metreKelvin')
    kelvinMole = Unit.get_unit_multiplication(kelvin, mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kelvinMole')
    reciprocalKelvin = Unit.get_unit_exponentiation(kelvin, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalKelvin')
    reciprocalCubicParsec = Unit.get_unit_exponentiation(parsec, -3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalCubicParsec')
    reciprocalCubicMetre = Unit.get_unit_exponentiation(metre, -3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalCubicMetre')
    squareMetre = Unit.get_unit_exponentiation(metre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMetre')
    cubicParsec = Unit.get_unit_exponentiation(parsec, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicParsec')
    candelaPerSquareMetre = Unit.get_unit_division(candela, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/candelaPerSquareMetre')
    squareMetrePerSquareMetre = Unit.get_unit_division(squareMetre, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMetrePerSquareMetre')
    metrePerMetre = Unit.get_unit_division(metre, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerMetre')
    molePerMetre = Unit.get_unit_division(mole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerMetre')
    molePerMole = Unit.get_unit_division(mole, mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerMole')
    _1000ColonyFormingUnit = Unit.get_unit_multiple(colonyFormingUnit, factor=1000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/_1000ColonyFormingUnit', label=Literal('1000 colony forming unit', lang='en'), symbol=Literal('1000 CFU'))
    petakelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petakelvin')
    yottamole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottamole')
    femtokelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtokelvin')
    exacandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exacandela')
    femtocandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtocandela')
    megamole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megamole')
    millimagnitude = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=magnitude, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millimagnitude')
    zettametre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettametre')
    petametre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petametre')
    nanokelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanokelvin')
    hectomole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectomole')
    nanometre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanometre')
    zettacandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettacandela')
    megaparsec = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=parsec, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megaparsec')
    centicandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centicandela')
    millimole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millimole')
    yottacandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottacandela')
    decakelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decakelvin')
    picomole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picomole')
    nanodegreeCelsius = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=degreeCelsius, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanodegreeCelsius')
    picometre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picometre')
    decimole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decimole')
    terakelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terakelvin')
    picokelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picokelvin')
    picodegreeCelsius = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=degreeCelsius, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picodegreeCelsius')
    zeptometre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptometre')
    decametre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decametre')
    picocandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picocandela')
    decikelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decikelvin')
    yoctocandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctocandela')
    kilometre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilometre')
    gigacandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigacandela')
    teramole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teramole')
    millidegreeCelsius = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=degreeCelsius, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millidegreeCelsius')
    attodegreeCelsius = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=degreeCelsius, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attodegreeCelsius')
    centimetre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centimetre')
    zeptokelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptokelvin')
    zeptocandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptocandela')
    attokelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attokelvin')
    micromagnitude = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=magnitude, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micromagnitude')
    microdegreeCelsius = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=degreeCelsius, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microdegreeCelsius')
    yoctometre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctometre')
    millicandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millicandela')
    centikelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centikelvin')
    attometre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attometre')
    gigametre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigametre')
    kiloparsec = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=parsec, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kiloparsec')
    megakelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megakelvin')
    decacandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decacandela')
    kilokelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilokelvin')
    gigakelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigakelvin')
    petamole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petamole')
    femtomole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtomole')
    exakelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exakelvin')
    exametre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exametre')
    examole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/examole')
    zettamole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettamole')
    decidegreeCelsius = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=degreeCelsius, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decidegreeCelsius')
    microcandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microcandela')
    yottakelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottakelvin')
    hectokelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectokelvin')
    centidegreeCelsius = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=degreeCelsius, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centidegreeCelsius')
    centimole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centimole')
    nanomole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanomole')
    petacandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petacandela')
    terametre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terametre')
    decamole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decamole')
    zettakelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettakelvin')
    microkelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microkelvin')
    hectometre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectometre')
    kilocandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilocandela')
    zeptodegreeCelsius = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=degreeCelsius, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptodegreeCelsius')
    millimetre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millimetre')
    megacandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megacandela')
    yottametre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottametre')
    femtometre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtometre')
    nanocandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanocandela')
    attomole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attomole')
    gigaparsec = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=parsec, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigaparsec')
    yoctomole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctomole')
    kilomole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilomole')
    percent = Unit.get_singular_unit([Literal('百分', lang='zh'), Literal('procent', lang='nl'), Literal('percent', lang='en')], Literal('%'), base_unit=one, factor=0.01, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/percent')
    are = Unit.get_singular_unit([Literal('are', lang='en'), Literal('are', lang='nl')], Literal('a'), base_unit=squareMetre, factor=100.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/are')
    stilb = Unit.get_singular_unit([Literal('stilb', lang='en'), Literal('stilb', lang='nl')], Literal('sb'), base_unit=candelaPerSquareMetre, factor=10000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/stilb')
    furlongInternational = Unit.get_singular_unit(Literal('furlong (international)', lang='en'), None, base_unit=metre, factor=201.168, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/furlong-International')
    deltaA450 = Unit.get_singular_unit(Literal('delta A450', lang='en'), None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/deltaA450')
    gram = Unit.get_singular_unit([Literal('克', lang='zh'), Literal('gram', lang='nl'), Literal('gram', lang='en')], Literal('g'), Dimension(0, 0, 1, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gram')
    mileStatute = Unit.get_singular_unit(Literal('mile (statute)', lang='en'), Literal('mi'), base_unit=metre, factor=1609.344, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/mile-Statute')
    fathomUSSurvey = Unit.get_singular_unit(Literal('fathom (US survey)', lang='en'), None, base_unit=metre, factor=1.828804, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/fathom-USSurvey')
    nauticalMileInternational = Unit.get_singular_unit([Literal('nautical mile (international)', lang='en'), Literal('zeemijl (internationaal)', lang='nl'), Literal('海里（国际）', lang='zh')], Literal('nmi'), base_unit=metre, factor=1852.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nauticalMile-International')
    ampere = Unit.get_singular_unit([Literal('ampère', lang='nl'), Literal('ampere', lang='en')], Literal('A'), Dimension(0, 0, 0, 1, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/ampere')
    degreeFahrenheit = Unit.get_singular_unit([Literal('degree Fahrenheit', lang='en'), Literal('graad Fahrenheit', lang='nl')], Literal('°F'), base_unit=kelvin, factor=0.5555556, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/degreeFahrenheit')
    pointTeX = Unit.get_singular_unit(Literal('point (TeX)', lang='en'), Literal('pt'), base_unit=inchInternational, factor=0.013837000138370002, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/point-TeX')
    fermi = Unit.get_singular_unit([Literal('fermi', lang='nl'), Literal('fermi', lang='en')], None, base_unit=metre, factor=1e-15, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/fermi')
    barn = Unit.get_singular_unit(Literal('barn', lang='en'), Literal('b'), base_unit=squareMetre, factor=1e-28, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/barn')
    pointPostscript = Unit.get_singular_unit(Literal('point (Postscript)', lang='en'), Literal('pt'), base_unit=inchInternational, factor=0.013888888888888888, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/point-Postscript')
    footUSSurvey = Unit.get_singular_unit(Literal('foot (US survey)', lang='en'), Literal('ft'), base_unit=metre, factor=0.3048006, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/foot-USSurvey')
    biot = Unit.get_singular_unit([Literal('biot', lang='nl'), Literal('biot', lang='en')], Literal('Bi'), base_unit=ampere, factor=10.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/biot')
    acreUSSurvey = Unit.get_singular_unit([Literal('英亩（美国调查）', lang='zh'), Literal('acre (US survey)', lang='en')], Literal('ac'), base_unit=squareMetre, factor=4046.872609874252, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/acre-USSurvey')
    UnitedStatesDollar = Unit.get_singular_unit([Literal('美国美元', lang='zh'), Literal('United States dollar', lang='en')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/UnitedStatesDollar')
    solarRadius = Unit.get_singular_unit(Literal('solar radius', lang='en'), Literal('R_☉'), base_unit=metre, factor=695500000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/solarRadius')
    cicero = Unit.get_singular_unit([Literal('cicero', lang='en'), Literal('cicero', lang='nl')], None, base_unit=pointDidot, factor=12.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cicero')
    partsPerMillion = Unit.get_singular_unit(Literal('parts per million', lang='en'), Literal('ppm'), base_unit=one, factor=1e-06, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/partsPerMillion')
    bit = Unit.get_singular_unit([Literal('bit', lang='en'), Literal('指二进制中的一位', lang='zh'), Literal('bit', lang='nl')], Literal('bit'), Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/bit')
    circularMil = Unit.get_singular_unit(Literal('circular mil', lang='en'), None, base_unit=squareMetre, factor=5.067075e-10, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/circularMil')
    hartley = Unit.get_singular_unit([Literal('hartley', lang='en'), Literal('hartley', lang='nl')], Literal('Hart'), base_unit=bit, factor=3.321928095, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hartley')
    footlambert = Unit.get_singular_unit(Literal('footlambert', lang='en'), None, base_unit=candelaPerSquareMetre, factor=3.426259, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/footlambert')
    secondTime = Unit.get_singular_unit([Literal('seconde', lang='nl'), Literal('second', lang='en'), Literal('秒', lang='zh')], Literal('s'), Dimension(1, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/second-Time')
    secondSidereal = Unit.get_singular_unit(Literal('second (sidereal)', lang='en'), None, base_unit=secondTime, factor=0.9972696, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/second-Sidereal')
    lightYear = Unit.get_singular_unit([Literal('lichtjaar', lang='nl'), Literal('light year', lang='en')], Literal('ly'), base_unit=metre, factor=9460730000000000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/lightYear')
    picaTeX = Unit.get_singular_unit(Literal('pica (TeX)', lang='en'), None, base_unit=pointTeX, factor=12.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/pica-TeX')
    darcy = Unit.get_singular_unit([Literal('darcy', lang='en'), Literal('darcy', lang='nl')], None, base_unit=squareMetre, factor=9.869233e-13, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/darcy')
    euro = Unit.get_singular_unit([Literal('euro', lang='en'), Literal('欧元', lang='zh')], None, Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/euro')
    shannon = Unit.get_singular_unit([Literal('shannon', lang='en'), Literal('shannon', lang='nl')], Literal('Sh'), base_unit=bit, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/shannon')
    picaATA = Unit.get_singular_unit(Literal('pica (ATA)', lang='en'), None, base_unit=pointATA, factor=12.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/pica-ATA')
    statampere = Unit.get_singular_unit([Literal('statampere', lang='en'), Literal('statampère', lang='nl')], Literal('statA'), base_unit=ampere, factor=3.335641e-10, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/statampere')
    gilbert = Unit.get_singular_unit([Literal('gilbert', lang='en'), Literal('gilbert', lang='nl')], Literal('Gb'), base_unit=ampere, factor=0.7957747, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gilbert')
    lambert = Unit.get_singular_unit([Literal('lambert', lang='en'), Literal('lambert', lang='nl')], None, base_unit=candelaPerSquareMetre, factor=3183.099, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/lambert')
    jansky = Unit.get_singular_unit([Literal('jansky', lang='nl'), Literal('jansky', lang='en')], Literal('Jy'), Dimension(0, 0, 0, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/jansky')
    radian = Unit.get_singular_unit([Literal('radiaal', lang='nl'), Literal('radian', lang='en'), Literal('弧度', lang='zh')], Literal('rad'), base_unit=metrePerMetre, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/radian')
    byte = Unit.get_singular_unit([Literal('byte', lang='nl'), Literal('byte', lang='en'), Literal('字节', lang='zh')], Literal('B'), base_unit=bit, factor=8.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/byte')
    shake = Unit.get_singular_unit(Literal('shake', lang='en'), None, base_unit=secondTime, factor=1e-08, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/shake')
    steradian = Unit.get_singular_unit([Literal('steradiaal', lang='nl'), Literal('steradian', lang='en'), Literal('球面度', lang='zh')], Literal('sr'), base_unit=squareMetrePerSquareMetre, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/steradian')
    squareMetreSecondTime = Unit.get_unit_multiplication(squareMetre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMetreSecond-Time')
    squareMetreSteradian = Unit.get_unit_multiplication(squareMetre, steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMetreSteradian')
    squareMetreKelvin = Unit.get_unit_multiplication(squareMetre, kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMetreKelvin')
    squareMetreNanometre = Unit.get_unit_multiplication(squareMetre, nanometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMetreNanometre')
    secondTimeAmpere = Unit.get_unit_multiplication(secondTime, ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/second-TimeAmpere')
    candelaSteradian = Unit.get_unit_multiplication(candela, steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/candelaSteradian')
    cubicMetre = Unit.get_unit_exponentiation(metre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicMetre')
    reciprocalPartsPerMillionPerYear = Unit.get_unit_exponentiation(partsPerMillion, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalPartsPerMillionPerYear')
    secondTimeToThePower2 = Unit.get_unit_exponentiation(secondTime, -2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/second-TimeToThePower-2')
    reciprocalDegreeCelsius = Unit.get_unit_exponentiation(degreeCelsius, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalDegreeCelsius')
    cubicKiloparsec = Unit.get_unit_exponentiation(kiloparsec, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicKiloparsec')
    reciprocalMetre = Unit.get_unit_exponentiation(metre, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalMetre')
    reciprocalGram = Unit.get_unit_exponentiation(gram, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalGram')
    secondTimeSquared = Unit.get_unit_exponentiation(secondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/second-TimeSquared')
    cubicKilometre = Unit.get_unit_exponentiation(kilometre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicKilometre')
    cubicZettametre = Unit.get_unit_exponentiation(zettametre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicZettametre')
    cubicZeptometre = Unit.get_unit_exponentiation(zeptometre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicZeptometre')
    cubicYottametre = Unit.get_unit_exponentiation(yottametre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicYottametre')
    cubicMillimetre = Unit.get_unit_exponentiation(millimetre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicMillimetre')
    cubicDecametre = Unit.get_unit_exponentiation(decametre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicDecametre')
    cubicNanometre = Unit.get_unit_exponentiation(nanometre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicNanometre')
    cubicPetametre = Unit.get_unit_exponentiation(petametre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicPetametre')
    cubicTerametre = Unit.get_unit_exponentiation(terametre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicTerametre')
    squarePetametre = Unit.get_unit_exponentiation(petametre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squarePetametre')
    squareTerametre = Unit.get_unit_exponentiation(terametre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareTerametre')
    squareDecametre = Unit.get_unit_exponentiation(decametre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareDecametre')
    squareGigametre = Unit.get_unit_exponentiation(gigametre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareGigametre')
    squareYoctometre = Unit.get_unit_exponentiation(yoctometre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareYoctometre')
    squareZettametre = Unit.get_unit_exponentiation(zettametre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareZettametre')
    squarePicometre = Unit.get_unit_exponentiation(picometre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squarePicometre')
    squareExametre = Unit.get_unit_exponentiation(exametre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareExametre')
    squareFemtometre = Unit.get_unit_exponentiation(femtometre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareFemtometre')
    deltaA450PerSecondTime = Unit.get_unit_division(deltaA450, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/deltaA450PerSecond-Time')
    gramPerCubicmetre = Unit.get_unit_division(gram, cubicMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerCubicmetre')
    cubicMetrePerCubicmetre = Unit.get_unit_division(cubicMetre, cubicMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicMetrePerCubicmetre')
    amperePerMetre = Unit.get_unit_division(ampere, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/amperePerMetre')
    gramPerMetre = Unit.get_unit_division(gram, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerMetre')
    colonyFormingUnitPerGram = Unit.get_unit_division(colonyFormingUnit, gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/colonyFormingUnitPerGram')
    degreeCelsiusPerSecondTime = Unit.get_unit_division(degreeCelsius, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/degreeCelsiusPerSecond-Time')
    molePerCubicmetre = Unit.get_unit_division(mole, cubicMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerCubicmetre')
    amperePerSquareMetre = Unit.get_unit_division(ampere, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/amperePerSquareMetre')
    cubicMetrePerMole = Unit.get_unit_division(cubicMetre, mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicMetrePerMole')
    cubicMetrePerSecondTime = Unit.get_unit_division(cubicMetre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicMetrePerSecond-Time')
    cubicMillimetrePerCubicMillimetre = Unit.get_unit_division(cubicMillimetre, cubicMillimetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicMillimetrePerCubicMillimetre')
    radianPerSecondTime = Unit.get_unit_division(radian, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/radianPerSecond-Time')
    squareMetrePerSecondTime = Unit.get_unit_division(squareMetre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMetrePerSecond-Time')
    gramPerGram = Unit.get_unit_division(gram, gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerGram')
    radianPerSecondTimeSquared = Unit.get_unit_division(radian, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/radianPerSecond-TimeSquared')
    gramPerSquareMetre = Unit.get_unit_division(gram, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerSquareMetre')
    metrePerCubicMetre = Unit.get_unit_division(metre, cubicMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerCubicMetre')
    metrePerSecondTime = Unit.get_unit_division(metre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerSecond-Time')
    bitPerSecondTime = Unit.get_unit_division(bit, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/bitPerSecond-Time')
    squareMetrePerGram = Unit.get_unit_division(squareMetre, gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMetrePerGram')
    metrePerSecondTimeSquared = Unit.get_unit_division(metre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerSecond-TimeSquared')
    nanometrePerSecondTime = Unit.get_unit_division(nanometre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanometrePerSecond-Time')
    kilometrePerSecondTime = Unit.get_unit_division(kilometre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilometrePerSecond-Time')
    exametrePerSecondTime = Unit.get_unit_division(exametre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exametrePerSecond-Time')
    millimetrePerSecondTime = Unit.get_unit_division(millimetre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millimetrePerSecond-Time')
    femtometrePerSecondTime = Unit.get_unit_division(femtometre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtometrePerSecond-Time')
    zeptometrePerSecondTime = Unit.get_unit_division(zeptometre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptometrePerSecond-Time')
    attometrePerSecondTime = Unit.get_unit_division(attometre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attometrePerSecond-Time')
    centimetrePerSecondTime = Unit.get_unit_division(centimetre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centimetrePerSecond-Time')
    zettametrePerSecondTime = Unit.get_unit_division(zettametre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettametrePerSecond-Time')
    yottametrePerSecondTimeSquared = Unit.get_unit_division(yottametre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottametrePerSecond-TimeSquared')
    exametrePerSecondTimeSquared = Unit.get_unit_division(exametre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exametrePerSecond-TimeSquared')
    femtometrePerSecondTimeSquared = Unit.get_unit_division(femtometre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtometrePerSecond-TimeSquared')
    hectometrePerSecondTimeSquared = Unit.get_unit_division(hectometre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectometrePerSecond-TimeSquared')
    millimetrePerSecondTimeSquared = Unit.get_unit_division(millimetre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millimetrePerSecond-TimeSquared')
    petametrePerSecondTimeSquared = Unit.get_unit_division(petametre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petametrePerSecond-TimeSquared')
    yoctometrePerSecondTimeSquared = Unit.get_unit_division(yoctometre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctometrePerSecond-TimeSquared')
    gigametrePerSecondTimeSquared = Unit.get_unit_division(gigametre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigametrePerSecond-TimeSquared')
    zettametrePerSecondTimeSquared = Unit.get_unit_division(zettametre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettametrePerSecond-TimeSquared')
    attometrePerSecondTimeSquared = Unit.get_unit_division(attometre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attometrePerSecond-TimeSquared')
    molePerFemtometre = Unit.get_unit_division(mole, femtometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerFemtometre')
    molePerMillimetre = Unit.get_unit_division(mole, millimetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerMillimetre')
    molePerYottametre = Unit.get_unit_division(mole, yottametre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerYottametre')
    molePerZeptometre = Unit.get_unit_division(mole, zeptometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerZeptometre')
    molePerExametre = Unit.get_unit_division(mole, exametre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerExametre')
    molePerCentimetre = Unit.get_unit_division(mole, centimetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerCentimetre')
    molePerZettametre = Unit.get_unit_division(mole, zettametre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerZettametre')
    molePerDecametre = Unit.get_unit_division(mole, decametre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerDecametre')
    molePerYoctometre = Unit.get_unit_division(mole, yoctometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerYoctometre')
    hectomolePerMetre = Unit.get_unit_division(hectomole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectomolePerMetre')
    zettamolePerMetre = Unit.get_unit_division(zettamole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettamolePerMetre')
    teramolePerMetre = Unit.get_unit_division(teramole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teramolePerMetre')
    yottamolePerMetre = Unit.get_unit_division(yottamole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottamolePerMetre')
    femtomolePerMetre = Unit.get_unit_division(femtomole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtomolePerMetre')
    millimolePerMetre = Unit.get_unit_division(millimole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millimolePerMetre')
    picomolePerMetre = Unit.get_unit_division(picomole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picomolePerMetre')
    examolePerMetre = Unit.get_unit_division(examole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/examolePerMetre')
    kilomolePerMetre = Unit.get_unit_division(kilomole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilomolePerMetre')
    decimolePerMetre = Unit.get_unit_division(decimole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decimolePerMetre')
    _100Kilometre = Unit.get_unit_multiple(kilometre, factor=100.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/_100Kilometre', label=[Literal('100 kilometer', lang='nl'), Literal('100 kilometre', lang='en')], symbol=Literal('100 km'))
    yoctodegreeCelsius = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=degreeCelsius, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctodegreeCelsius')
    megasecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megasecond-Time')
    exasecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exasecond-Time')
    microampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microampere')
    yottabit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottabit')
    kibibit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kibi', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kibibit')
    yobibit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yobi', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yobibit')
    milligram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milligram')
    megametre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megametre')
    megagram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megagram')
    nanoampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanoampere')
    millikelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millikelvin')
    yoctogram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctogram')
    hectocandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectocandela')
    mebibit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mebi', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/mebibit')
    teragram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teragram')
    micrometre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micrometre')
    decisecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decisecond-Time')
    decaampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decaampere')
    kilosecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilosecond-Time')
    femtosteradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtosteradian')
    picogram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picogram')
    petabit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petabit')
    gigaampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigaampere')
    femtosecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtosecond-Time')
    terabyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terabyte')
    zeptomole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptomole')
    exbibyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exbi', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exbibyte')
    zebibit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zebi', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zebibit')
    decagram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decagram')
    centisteradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centisteradian')
    deciampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/deciampere')
    zettaampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettaampere')
    centiradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=radian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centiradian')
    megaeuro = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=euro, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megaeuro')
    petagram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petagram')
    yobibyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yobi', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yobibyte')
    kiloampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kiloampere')
    tebibyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tebi', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/tebibyte')
    attocandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attocandela')
    gigabit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigabit')
    zeptosteradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptosteradian')
    hectogram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectogram')
    hectosecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectosecond-Time')
    zeptoradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=radian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptoradian')
    pebibyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pebi', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/pebibyte')
    picosecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picosecond-Time')
    kilobit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilobit')
    milliradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=radian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milliradian')
    kibibyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kibi', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kibibyte')
    picosteradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picosteradian')
    zeptosecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptosecond-Time')
    gigasecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigasecond-Time')
    yottagram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottagram')
    gigagram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigagram')
    nanoradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=radian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanoradian')
    exaampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exaampere')
    zettasecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettasecond-Time')
    terabit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terabit')
    microsecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microsecond-Time')
    yoctokelvin = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctokelvin')
    zettabit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettabit')
    hectoampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectoampere')
    millisecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millisecond-Time')
    nanosecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanosecond-Time')
    terasecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terasecond-Time')
    gibibit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/gibi', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gibibit')
    hectare = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=are, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectare')
    pebibit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pebi', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/pebibit')
    femtodegreeCelsius = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=degreeCelsius, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtodegreeCelsius')
    petasecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petasecond-Time')
    decigram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decigram')
    nanosteradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanosteradian')
    attogram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attogram')
    decasecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decasecond-Time')
    microsteradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microsteradian')
    exagram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exagram')
    millisteradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millisteradian')
    gigabyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigabyte')
    teracandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teracandela')
    petabyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petabyte')
    zettagram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettagram')
    zeptoampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptoampere')
    attosecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attosecond-Time')
    teraampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teraampere')
    decisteradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decisteradian')
    exbibit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exbi', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exbibit')
    tebibit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tebi', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/tebibit')
    attosteradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attosteradian')
    femtoampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtoampere')
    kilobyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilobyte')
    picoradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=radian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picoradian')
    gibibyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/gibi', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gibibyte')
    petaampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petaampere')
    decimetre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decimetre')
    exabyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exabyte')
    yoctosteradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctosteradian')
    exabit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exabit')
    yottabyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottabyte')
    zebibyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zebi', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zebibyte')
    picoampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picoampere')
    yottaampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottaampere')
    deciradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=radian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/deciradian')
    femtoradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=radian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtoradian')
    yoctosecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctosecond-Time')
    milAngle = Unit.get_singular_unit(Literal('mil (angle)', lang='en'), None, base_unit=radian, factor=0.0009817477, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/mil-Angle')
    barrelUS = Unit.get_singular_unit(Literal('barrel (US)', lang='en'), Literal('bbl'), base_unit=cubicMetre, factor=0.1589873, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/barrel-US')
    milLength = Unit.get_singular_unit(Literal('mil (length)', lang='en'), None, base_unit=metre, factor=2.54e-05, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/mil-Length')
    picaPostscript = Unit.get_singular_unit(Literal('pica (Postscript)', lang='en'), None, base_unit=pointPostscript, factor=12.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/pica-Postscript')
    dryPintUS = Unit.get_singular_unit(Literal('dry pint (US)', lang='en'), Literal('dry pt'), base_unit=cubicMetre, factor=0.0005506105, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/dryPint-US')
    revolution = Unit.get_singular_unit(Literal('revolution', lang='en'), Literal('r'), base_unit=radian, factor=6.283185, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/revolution')
    bushelUS = Unit.get_singular_unit(Literal('bushel (US)', lang='en'), Literal('bu'), base_unit=cubicMetre, factor=0.03523907, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/bushel-US')
    coulomb = Unit.get_singular_unit([Literal('coulomb', lang='en'), Literal('coulomb', lang='nl')], Literal('C'), base_unit=secondTimeAmpere, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/coulomb')
    gillUS = Unit.get_singular_unit(Literal('gill (US)', lang='en'), Literal('gi'), base_unit=cubicMetre, factor=0.0001182941, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gill-US')
    faraday = Unit.get_singular_unit([Literal('faraday', lang='nl'), Literal('faraday', lang='en')], None, base_unit=coulomb, factor=96485.31, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/faraday')
    liquidPintUS = Unit.get_singular_unit(Literal('liquid pint (US)', lang='en'), Literal('liq pt'), base_unit=cubicMetre, factor=0.0004731765, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/liquidPint-US')
    minuteAngle = Unit.get_singular_unit([Literal('minuut (hoek)', lang='nl'), Literal('分钟（角）', lang='zh'), Literal('minute (angle)', lang='en')], Literal('\''), base_unit=radian, factor=0.0002908882, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/minute-Angle')
    fluidOunceImperial = Unit.get_singular_unit(Literal('fluid ounce (imperial)', lang='en'), Literal('fl oz'), base_unit=cubicMetre, factor=2.841306e-05, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/fluidOunce-Imperial')
    degreeReaumur = Unit.get_singular_unit([Literal('graad Réaumur', lang='nl'), Literal('degree Réaumur', lang='en')], Literal('°Ré'), base_unit=kelvin, factor=1.25, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/degreeReaumur')
    litre = Unit.get_singular_unit([Literal('liter', lang='nl'), Literal('升', lang='zh'), Literal('litre', lang='en')], Literal('l'), base_unit=cubicMetre, factor=0.001, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/litre')
    micron = Unit.get_singular_unit([Literal('micron', lang='nl'), Literal('micron', lang='en')], Literal('μ'), base_unit=metre, factor=1e-06, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micron')
    acreFoot = Unit.get_singular_unit(Literal('acre foot', lang='en'), None, base_unit=cubicMetre, factor=1233.489, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/acreFoot')
    statcoulomb = Unit.get_singular_unit([Literal('statcoulomb', lang='en'), Literal('statcoulomb', lang='nl')], Literal('statC'), base_unit=coulomb, factor=3.335641e-10, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/statcoulomb')
    unifiedAtomicMassUnit = Unit.get_singular_unit(Literal('unified atomic mass unit', lang='en'), Literal('u'), Dimension(0, 0, 1, 0, 0, 0, 0), identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/unifiedAtomicMassUnit')
    lumen = Unit.get_singular_unit([Literal('lumen', lang='nl'), Literal('lumen', lang='en')], Literal('lm'), base_unit=candelaSteradian, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/lumen')
    abampere = Unit.get_singular_unit([Literal('abampère', lang='nl'), Literal('abampere', lang='en')], Literal('abA'), base_unit=ampere, factor=10.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/abampere')
    dryGallonUS = Unit.get_singular_unit(Literal('dry gallon (US)', lang='en'), Literal('gal'), base_unit=cubicMetre, factor=0.00440488377086, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/dryGallon-US')
    tablespoonUS = Unit.get_singular_unit(Literal('tablespoon (US)', lang='en'), None, base_unit=cubicMetre, factor=1.478676e-05, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/tablespoon-US')
    peckUS = Unit.get_singular_unit(Literal('peck (US)', lang='en'), Literal('pk'), base_unit=cubicMetre, factor=0.008809768, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/peck-US')
    gon = Unit.get_singular_unit(Literal('gon', lang='en'), Literal('gon'), base_unit=radian, factor=0.01570796, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gon')
    teaspoonUS = Unit.get_singular_unit(Literal('teaspoon (US)', lang='en'), None, base_unit=cubicMetre, factor=4.928922e-06, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teaspoon-US')
    minuteTime = Unit.get_singular_unit([Literal('minute', lang='en'), Literal('minuut', lang='nl'), Literal('分钟', lang='zh')], Literal('min'), base_unit=secondTime, factor=60.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/minute-Time')
    year = Unit.get_singular_unit([Literal('jaar', lang='nl'), Literal('year', lang='en')], Literal('a'), base_unit=secondTime, factor=31536000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/year')
    liquidQuartUS = Unit.get_singular_unit(Literal('liquid quart (US)', lang='en'), Literal('liq qt'), base_unit=cubicMetre, factor=0.0009463529, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/liquidQuart-US')
    cord = Unit.get_singular_unit(Literal('cord', lang='en'), None, base_unit=cubicMetre, factor=3.624556, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cord')
    acreInternational = Unit.get_singular_unit([Literal('英亩（国际）', lang='zh'), Literal('acre (international)', lang='en')], Literal('ac'), base_unit=squareMetre, factor=4046.8564224, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/acre-International')
    quartImperial = Unit.get_singular_unit(Literal('quart (imperial)', lang='en'), None, base_unit=litre, factor=1.1365, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/quart-Imperial')
    mileUSSurvey = Unit.get_singular_unit(Literal('mile (US survey)', lang='en'), None, base_unit=metre, factor=1609.347, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/mile-USSurvey')
    tonRegister = Unit.get_singular_unit(Literal('ton (register)', lang='en'), None, base_unit=cubicMetre, factor=2.831658, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/ton-Register')
    stere = Unit.get_singular_unit(Literal('stere', lang='en'), None, base_unit=cubicMetre, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/stere')
    chain = Unit.get_singular_unit(Literal('chain', lang='en'), Literal('ch'), base_unit=metre, factor=20.11684, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/chain')
    abcoulomb = Unit.get_singular_unit([Literal('abcoulomb', lang='en'), Literal('abcoulomb', lang='nl')], Literal('abC'), base_unit=coulomb, factor=10.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/abcoulomb')
    stokes = Unit.get_singular_unit([Literal('stokes', lang='nl'), Literal('stokes', lang='en')], Literal('St'), base_unit=squareMetrePerSecondTime, factor=0.0001, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/stokes')
    gallonImperial = Unit.get_singular_unit(Literal('gallon (imperial)', lang='en'), Literal('gal'), base_unit=cubicMetre, factor=0.00454609, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gallon-Imperial')
    dryQuartUS = Unit.get_singular_unit(Literal('dry quart (US)', lang='en'), Literal('dry qt'), base_unit=cubicMetre, factor=0.001101221, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/dryQuart-US')
    secondAngle = Unit.get_singular_unit([Literal('秒（角度）', lang='zh'), Literal('seconde (hoek)', lang='nl'), Literal('second (angle)', lang='en')], Literal('\"'), base_unit=radian, factor=4.848137e-06, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/second-Angle')
    gallonUS = Unit.get_singular_unit(Literal('gallon (US)', lang='en'), Literal('gal'), base_unit=cubicMetre, factor=0.003785412, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gallon-US')
    yearSidereal = Unit.get_singular_unit(Literal('year (sidereal)', lang='en'), None, base_unit=secondTime, factor=31558150.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/year-Sidereal')
    gillImperial = Unit.get_singular_unit(Literal('gill (imperial)', lang='en'), Literal('gi'), base_unit=cubicMetre, factor=0.0001420653, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gill-Imperial')
    kayser = Unit.get_singular_unit([Literal('kayser', lang='nl'), Literal('kayser', lang='en')], None, base_unit=reciprocalMetre, factor=100.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kayser')
    lumenSecondTime = Unit.get_unit_multiplication(lumen, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/lumenSecond-Time')
    moleMicrometre = Unit.get_unit_multiplication(mole, micrometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/moleMicrometre')
    coulombMetre = Unit.get_unit_multiplication(coulomb, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/coulombMetre')
    cubicMetreKelvin = Unit.get_unit_multiplication(cubicMetre, kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicMetreKelvin')
    steradianSquareMetre = Unit.get_unit_multiplication(steradian, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/steradianSquareMetre')
    reciprocalMinuteTime = Unit.get_unit_exponentiation(minuteTime, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalMinute-Time')
    secondAngleSquared = Unit.get_unit_exponentiation(secondAngle, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/second-AngleSquared')
    reciprocalSecondTime = Unit.get_unit_exponentiation(secondTime, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalSecond-Time')
    reciprocalYear = Unit.get_unit_exponentiation(year, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalYear')
    reciprocalSquareCentimetre = Unit.get_unit_exponentiation(centimetre, -2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalSquareCentimetre')
    femtosecondTimeSquared = Unit.get_unit_exponentiation(femtosecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtosecond-TimeSquared')
    hectosecondTimeSquared = Unit.get_unit_exponentiation(hectosecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectosecond-TimeSquared')
    exasecondTimeSquared = Unit.get_unit_exponentiation(exasecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exasecond-TimeSquared')
    petasecondTimeSquared = Unit.get_unit_exponentiation(petasecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petasecond-TimeSquared')
    megasecondTimeSquared = Unit.get_unit_exponentiation(megasecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megasecond-TimeSquared')
    microsecondTimeSquared = Unit.get_unit_exponentiation(microsecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microsecond-TimeSquared')
    gigasecondTimeSquared = Unit.get_unit_exponentiation(gigasecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigasecond-TimeSquared')
    nanosecondTimeSquared = Unit.get_unit_exponentiation(nanosecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanosecond-TimeSquared')
    attosecondTimeSquared = Unit.get_unit_exponentiation(attosecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attosecond-TimeSquared')
    cubicDecimetre = Unit.get_unit_exponentiation(decimetre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicDecimetre')
    cubicCentimetre = Unit.get_unit_exponentiation(centimetre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicCentimetre')
    cubicExametre = Unit.get_unit_exponentiation(exametre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicExametre')
    cubicAttometre = Unit.get_unit_exponentiation(attometre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicAttometre')
    cubicYoctometre = Unit.get_unit_exponentiation(yoctometre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicYoctometre')
    cubicFemtometre = Unit.get_unit_exponentiation(femtometre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicFemtometre')
    squareMicrometre = Unit.get_unit_exponentiation(micrometre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMicrometre')
    squareAttometre = Unit.get_unit_exponentiation(attometre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareAttometre')
    squareCentimetre = Unit.get_unit_exponentiation(centimetre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareCentimetre')
    squareDecimetre = Unit.get_unit_exponentiation(decimetre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareDecimetre')
    squareYottametre = Unit.get_unit_exponentiation(yottametre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareYottametre')
    kilometrePerSecondTimePerMegaparsec = Unit.get_unit_division(kilometrePerSecondTime, megaparsec, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilometrePerSecond-TimePerMegaparsec')
    milligramPerHectogram = Unit.get_unit_division(milligram, hectogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milligramPerHectogram')
    partsPerMillionPerYear = Unit.get_unit_division(partsPerMillion, year, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/partsPerMillionPerYear')
    lumenPerSquareMetre = Unit.get_unit_division(lumen, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/lumenPerSquareMetre')
    gramPerSquareMetreMetre = Unit.get_unit_division(gramPerSquareMetre, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerSquareMetreMetre')
    deltaA450PerSecondTimePerMilligram = Unit.get_unit_division(deltaA450PerSecondTime, milligram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/deltaA450PerSecond-TimePerMilligram')
    molePerLitre = Unit.get_unit_division(mole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerLitre')
    gramPerHectogram = Unit.get_unit_division(gram, hectogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerHectogram')
    cubicCentimetrePerCubicCentimetre = Unit.get_unit_division(cubicCentimetre, cubicCentimetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicCentimetrePerCubicCentimetre')
    centimetrePerCubicCentimetre = Unit.get_unit_division(centimetre, cubicCentimetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centimetrePerCubicCentimetre')
    litrePer100Kilometre = Unit.get_unit_division(litre, _100Kilometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/litrePer100Kilometre')
    gramPerSquareMetreSecondTime = Unit.get_unit_division(gram, squareMetreSecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerSquareMetreSecond-Time')
    cubicMetrePerYear = Unit.get_unit_division(cubicMetre, year, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicMetrePerYear')
    degreeCelsiusPerMinuteTime = Unit.get_unit_division(degreeCelsius, minuteTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/degreeCelsiusPerMinute-Time')
    gramPerSquareMetreCentimetre = Unit.get_unit_division(gramPerSquareMetre, centimetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerSquareMetreCentimetre')
    magnitudePerSecondAngleSquared = Unit.get_unit_division(magnitude, secondAngleSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/magnitudePerSecond-AngleSquared')
    candelaPerSquareCentimetre = Unit.get_unit_division(candela, squareCentimetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/candelaPerSquareCentimetre')
    milligramPerKilometre = Unit.get_unit_division(milligram, kilometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milligramPerKilometre')
    metrePerSecondTimePerMetre = Unit.get_unit_division(metrePerSecondTime, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerSecond-TimePerMetre')
    gramPerLitre = Unit.get_unit_division(gram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerLitre')
    gramPerCubicCentimetre = Unit.get_unit_division(gram, cubicCentimetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerCubicCentimetre')
    secondTimePerSquareMetre = Unit.get_unit_division(secondTime, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/second-TimePerSquareMetre')
    coulombPerCubicmetre = Unit.get_unit_division(coulomb, cubicMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/coulombPerCubicmetre')
    decigramPerLitre = Unit.get_unit_division(decigram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decigramPerLitre')
    teragramPerLitre = Unit.get_unit_division(teragram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teragramPerLitre')
    picogramPerLitre = Unit.get_unit_division(picogram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picogramPerLitre')
    zettagramPerLitre = Unit.get_unit_division(zettagram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettagramPerLitre')
    hectogramPerLitre = Unit.get_unit_division(hectogram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectogramPerLitre')
    yottagramPerLitre = Unit.get_unit_division(yottagram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottagramPerLitre')
    petagramPerLitre = Unit.get_unit_division(petagram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petagramPerLitre')
    gigagramPerLitre = Unit.get_unit_division(gigagram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigagramPerLitre')
    megagramPerLitre = Unit.get_unit_division(megagram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megagramPerLitre')
    picometrePerSecondTime = Unit.get_unit_division(picometre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picometrePerSecond-Time')
    hectometrePerSecondTime = Unit.get_unit_division(hectometre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectometrePerSecond-Time')
    decametrePerSecondTime = Unit.get_unit_division(decametre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decametrePerSecond-Time')
    petametrePerSecondTime = Unit.get_unit_division(petametre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petametrePerSecond-Time')
    terametrePerSecondTime = Unit.get_unit_division(terametre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terametrePerSecond-Time')
    megametrePerSecondTime = Unit.get_unit_division(megametre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megametrePerSecond-Time')
    metrePerPetasecondTimeSquared = Unit.get_unit_division(metre, petasecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerPetasecond-TimeSquared')
    metrePerFemtosecondTimeSquared = Unit.get_unit_division(metre, femtosecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerFemtosecond-TimeSquared')
    metrePerMegasecondTimeSquared = Unit.get_unit_division(metre, megasecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerMegasecond-TimeSquared')
    metrePerHectosecondTimeSquared = Unit.get_unit_division(metre, hectosecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerHectosecond-TimeSquared')
    metrePerGigasecondTimeSquared = Unit.get_unit_division(metre, gigasecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerGigasecond-TimeSquared')
    metrePerAttosecondTimeSquared = Unit.get_unit_division(metre, attosecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerAttosecond-TimeSquared')
    metrePerExasecondTimeSquared = Unit.get_unit_division(metre, exasecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerExasecond-TimeSquared')
    nanometrePerSecondTimeSquared = Unit.get_unit_division(nanometre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanometrePerSecond-TimeSquared')
    centimetrePerSecondTimeSquared = Unit.get_unit_division(centimetre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centimetrePerSecond-TimeSquared')
    megametrePerSecondTimeSquared = Unit.get_unit_division(megametre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megametrePerSecond-TimeSquared')
    picometrePerSecondTimeSquared = Unit.get_unit_division(picometre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picometrePerSecond-TimeSquared')
    zeptometrePerSecondTimeSquared = Unit.get_unit_division(zeptometre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptometrePerSecond-TimeSquared')
    molePermegametre = Unit.get_unit_division(mole, megametre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePermegametre')
    molePerTerametre = Unit.get_unit_division(mole, terametre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerTerametre')
    molePerPetametre = Unit.get_unit_division(mole, petametre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerPetametre')
    molePerDecimetre = Unit.get_unit_division(mole, decimetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerDecimetre')
    molePerMicrometre = Unit.get_unit_division(mole, micrometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerMicrometre')
    molePerAttometre = Unit.get_unit_division(mole, attometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerAttometre')
    metrePerMicrosecondTime = Unit.get_unit_division(metre, microsecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerMicrosecond-Time')
    metrePerPicosecondTime = Unit.get_unit_division(metre, picosecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerPicosecond-Time')
    metrePerMillisecondTime = Unit.get_unit_division(metre, millisecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerMillisecond-Time')
    metrePerGigasecondTime = Unit.get_unit_division(metre, gigasecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerGigasecond-Time')
    metrePerDecisecondTime = Unit.get_unit_division(metre, decisecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerDecisecond-Time')
    metrePerZettasecondTime = Unit.get_unit_division(metre, zettasecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerZettasecond-Time')
    metrePerHectosecondTime = Unit.get_unit_division(metre, hectosecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerHectosecond-Time')
    metrePerTerasecondTime = Unit.get_unit_division(metre, terasecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerTerasecond-Time')
    metrePerMegasecondTime = Unit.get_unit_division(metre, megasecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerMegasecond-Time')
    zettamolePerLitre = Unit.get_unit_division(zettamole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettamolePerLitre')
    megamolePerLitre = Unit.get_unit_division(megamole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megamolePerLitre')
    decamolePerLitre = Unit.get_unit_division(decamole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decamolePerLitre')
    millimolePerLitre = Unit.get_unit_division(millimole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millimolePerLitre')
    petamolePerLitre = Unit.get_unit_division(petamole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petamolePerLitre')
    centimolePerLitre = Unit.get_unit_division(centimole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centimolePerLitre')
    teramolePerLitre = Unit.get_unit_division(teramole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teramolePerLitre')
    hectomolePerLitre = Unit.get_unit_division(hectomole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectomolePerLitre')
    nanomolePerLitre = Unit.get_unit_division(nanomole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanomolePerLitre')
    examolePerLitre = Unit.get_unit_division(examole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/examolePerLitre')
    attomolePerMetre = Unit.get_unit_division(attomole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attomolePerMetre')
    yoctomolePerMetre = Unit.get_unit_division(yoctomole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctomolePerMetre')
    megamolePerMetre = Unit.get_unit_division(megamole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megamolePerMetre')
    decamolePerMetre = Unit.get_unit_division(decamole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decamolePerMetre')
    microgram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microgram')
    yottalitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottalitre')
    yoctolitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctolitre')
    gigalumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigalumen')
    microlumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microlumen')
    zettalumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettalumen')
    nanogram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanogram')
    nanolumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanolumen')
    kilolitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilolitre')
    femtogram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtogram')
    teracoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teracoulomb')
    centistokes = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=stokes, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centistokes')
    microcoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microcoulomb')
    decicoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decicoulomb')
    exalitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exalitre')
    yottasecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottasecond-Time')
    microradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=radian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microradian')
    femtocoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtocoulomb')
    decalumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decalumen')
    petalumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petalumen')
    teralumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teralumen')
    micromole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micromole')
    megalumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megalumen')
    teralitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teralitre')
    megabyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megabyte')
    gigayear = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=year, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigayear')
    decalitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decalitre')
    decilitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decilitre')
    megalitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megalitre')
    centilumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centilumen')
    centiare = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=are, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centiare')
    megabit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=bit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megabit')
    nanounifiedAtomicMassUnit = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=unifiedAtomicMassUnit, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanounifiedAtomicMassUnit')
    hectolumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectolumen')
    picolitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picolitre')
    femtolumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtolumen')
    decilumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decilumen')
    gigacoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigacoulomb')
    decacoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decacoulomb')
    gigalitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigalitre')
    centicoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centicoulomb')
    kilolumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilolumen')
    exacoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exacoulomb')
    zeptolumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptolumen')
    kilogram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogram')
    gigamole = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigamole')
    femtolitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtolitre')
    centilitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centilitre')
    kilocoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilocoulomb')
    exalumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exalumen')
    hectolitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectolitre')
    millilitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millilitre')
    picocoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picocoulomb')
    zettalitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettalitre')
    picolumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picolumen')
    attolitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attolitre')
    millisecondAngle = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=secondAngle, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millisecond-Angle')
    megacoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megacoulomb')
    mebibyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mebi', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/mebibyte')
    nanolitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanolitre')
    zettacoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettacoulomb')
    attocoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attocoulomb')
    millilumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millilumen')
    yoctoradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=radian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctoradian')
    centigram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centigram')
    petalitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petalitre')
    yottalumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottalumen')
    microsecondAngle = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=secondAngle, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microsecond-Angle')
    yottacoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottacoulomb')
    petacoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petacoulomb')
    millicoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millicoulomb')
    hertz = Unit.get_singular_unit([Literal('hertz', lang='nl'), Literal('赫兹', lang='zh'), Literal('hertz', lang='en')], Literal('Hz'), base_unit=reciprocalSecondTime, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hertz')
    ounceApothecaries = Unit.get_singular_unit(Literal('ounce (apothecaries\')', lang='en'), Literal('oz (ap.)'), base_unit=kilogram, factor=0.03110348, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/ounceApothecaries')
    franklin = Unit.get_singular_unit([Literal('franklin', lang='nl'), Literal('franklin', lang='en')], Literal('Fr'), base_unit=coulomb, factor=3.335641e-10, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/franklin')
    becquerel = Unit.get_singular_unit([Literal('becquerel', lang='en'), Literal('becquerel', lang='nl')], Literal('Bq'), base_unit=reciprocalSecondTime, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/becquerel')
    day = Unit.get_singular_unit([Literal('day', lang='en'), Literal('天', lang='zh'), Literal('dag', lang='nl')], Literal('d'), base_unit=secondTime, factor=86400.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/day')
    hour = Unit.get_singular_unit([Literal('小时', lang='zh'), Literal('uur', lang='nl'), Literal('hour', lang='en')], Literal('h'), base_unit=secondTime, factor=3600.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hour')
    minuteSidereal = Unit.get_singular_unit(Literal('minute (sidereal)', lang='en'), None, base_unit=secondTime, factor=59.83617, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/minute-Sidereal')
    tonLong = Unit.get_singular_unit(Literal('ton (long)', lang='en'), None, base_unit=kilogram, factor=1016.047, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/ton-Long')
    molair = Unit.get_singular_unit([Literal('molair', lang='nl'), Literal('molair', lang='en')], Literal('M'), base_unit=molePerLitre, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molair')
    dessertspoon = Unit.get_singular_unit(Literal('dessertspoon', lang='en'), None, base_unit=teaspoonUS, factor=2.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/dessertspoon')
    week = Unit.get_singular_unit([Literal('week', lang='en'), Literal('week', lang='nl')], None, base_unit=secondTime, factor=604800.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/week')
    hourSidereal = Unit.get_singular_unit(Literal('hour (sidereal)', lang='en'), None, base_unit=secondTime, factor=3590.17, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hour-Sidereal')
    pintImperial = Unit.get_singular_unit(Literal('pint (imperial)', lang='en'), None, base_unit=millilitre, factor=568.26125, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/pint-Imperial')
    angstrom = Unit.get_singular_unit([Literal('ångström', lang='en'), Literal('ångström', lang='nl')], Literal('Å'), base_unit=metre, factor=1e-10, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/angstrom')
    pennyweightTroy = Unit.get_singular_unit(Literal('pennyweight (Troy)', lang='en'), Literal('dwt'), base_unit=kilogram, factor=0.001555174, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/pennyweight-Troy')
    tonne = Unit.get_singular_unit([Literal('ton', lang='nl'), Literal('tonne', lang='en'), Literal('公吨', lang='zh')], Literal('t'), base_unit=kilogram, factor=1000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/tonne')
    degree = Unit.get_singular_unit([Literal('graad', lang='nl'), Literal('度', lang='zh'), Literal('degree', lang='en')], Literal('°'), base_unit=radian, factor=0.01745329, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/degree')
    cupUSCustomary = Unit.get_singular_unit(Literal('cup (US customary)', lang='en'), None, base_unit=cubicMetre, factor=0.0002365882, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cup-USCustomary')
    tonShortAssay = Unit.get_singular_unit(Literal('ton (short assay)', lang='en'), None, base_unit=kilogram, factor=0.02916667, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/ton-ShortAssay')
    grain = Unit.get_singular_unit(Literal('grain', lang='en'), Literal('gr'), base_unit=kilogram, factor=6.479891e-05, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/grain')
    minuteHourAngle = Unit.get_singular_unit([Literal('minute (hour angle)', lang='en'), Literal('minuut (uurhoek)', lang='nl')], Literal('m'), base_unit=degree, factor=0.25, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/minute-HourAngle')
    curie = Unit.get_singular_unit([Literal('curie', lang='nl'), Literal('curie', lang='en')], Literal('Ci'), base_unit=becquerel, factor=37000000000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/curie')
    gal = Unit.get_singular_unit([Literal('gal', lang='en'), Literal('gal', lang='nl')], Literal('Gal'), base_unit=centimetrePerSecondTimeSquared, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gal')
    hourHourAngle = Unit.get_singular_unit([Literal('hour (hour angle)', lang='en'), Literal('uur (uurhoek)', lang='nl')], Literal('h'), base_unit=degree, factor=15.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hour-HourAngle')
    daySidereal = Unit.get_singular_unit(Literal('day (sidereal)', lang='en'), None, base_unit=secondTime, factor=86164.09, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/day-Sidereal')
    fluidOunceUS = Unit.get_singular_unit(Literal('fluid ounce (US)', lang='en'), Literal('fl oz'), base_unit=cubicMetre, factor=2.957353e-05, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/fluidOunce-US')
    tonShort = Unit.get_singular_unit(Literal('ton (short)', lang='en'), None, base_unit=kilogram, factor=907.1847, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/ton-Short')
    poundApothecaries = Unit.get_singular_unit(Literal('pound (apthecaries\')', lang='en'), Literal('lb'), base_unit=kilogram, factor=0.3732417, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/poundApothecaries')
    slug = Unit.get_singular_unit([Literal('金属块', lang='zh'), Literal('slug', lang='en')], Literal('slug'), base_unit=kilogram, factor=14.5939, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/slug')
    debye = Unit.get_singular_unit([Literal('debye', lang='nl'), Literal('debye', lang='en')], Literal('D'), base_unit=coulombMetre, factor=3.33564e-30, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/debye')
    ounceAvoirdupois = Unit.get_singular_unit(Literal('ounce (avoirdupois)', lang='en'), Literal('oz'), base_unit=kilogram, factor=0.02834952, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/ounceAvoirdupois')
    caratMass = Unit.get_singular_unit([Literal('carat (mass)', lang='en'), Literal('karaat (massa)', lang='nl')], None, base_unit=kilogram, factor=0.0002, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/carat-Mass')
    squareMetreDay = Unit.get_unit_multiplication(squareMetre, day, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMetreDay')
    hectareDay = Unit.get_unit_multiplication(hectare, day, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectareDay')
    kilogramSquareMetre = Unit.get_unit_multiplication(kilogram, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramSquareMetre')
    kelvinKilogram = Unit.get_unit_multiplication(kelvin, kilogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kelvinKilogram')
    moleMicrometreReciprocalSquareCentimetre = Unit.get_unit_multiplication(moleMicrometre, reciprocalSquareCentimetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/moleMicrometreReciprocalSquareCentimetre')
    moleMicrometreReciprocalSquareCentimetreReciprocalSecondTime = Unit.get_unit_multiplication(moleMicrometreReciprocalSquareCentimetre, reciprocalSecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/moleMicrometreReciprocalSquareCentimetreReciprocalSecond-Time')
    kilogramSecondTimeToThePower2 = Unit.get_unit_multiplication(kilogram, secondTimeToThePower2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramSecond-TimeToThePower-2')
    steradianSquareMetreHertz = Unit.get_unit_multiplication(steradianSquareMetre, hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/steradianSquareMetreHertz')
    kilogramSecondTimeToThePower2ReciprocalMetre = Unit.get_unit_multiplication(kilogramSecondTimeToThePower2, reciprocalMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramSecond-TimeToThePower-2ReciprocalMetre')
    squareMetreHertz = Unit.get_unit_multiplication(squareMetre, hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMetreHertz')
    reciprocalSquareMetre = Unit.get_unit_exponentiation(metre, -2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalSquareMetre')
    degreeSquared = Unit.get_unit_exponentiation(degree, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/degreeSquared')
    reciprocalHour = Unit.get_unit_exponentiation(hour, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalHour')
    reciprocalDay = Unit.get_unit_exponentiation(day, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalDay')
    zeptosecondTimeSquared = Unit.get_unit_exponentiation(zeptosecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptosecond-TimeSquared')
    picosecondTimeSquared = Unit.get_unit_exponentiation(picosecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picosecond-TimeSquared')
    yoctosecondTimeSquared = Unit.get_unit_exponentiation(yoctosecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctosecond-TimeSquared')
    decasecondTimeSquared = Unit.get_unit_exponentiation(decasecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decasecond-TimeSquared')
    zettasecondTimeSquared = Unit.get_unit_exponentiation(zettasecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettasecond-TimeSquared')
    cubicHectometre = Unit.get_unit_exponentiation(hectometre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicHectometre')
    cubicMicrometre = Unit.get_unit_exponentiation(micrometre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicMicrometre')
    cubicMegametre = Unit.get_unit_exponentiation(megametre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicMegametre')
    squareMillimetre = Unit.get_unit_exponentiation(millimetre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMillimetre')
    squareKilometre = Unit.get_unit_exponentiation(kilometre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareKilometre')
    squareNanometre = Unit.get_unit_exponentiation(nanometre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareNanometre')
    milligramPerCubicmetre = Unit.get_unit_division(milligram, cubicMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milligramPerCubicmetre')
    millimetrePerHour = Unit.get_unit_division(millimetre, hour, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millimetrePerHour')
    kilogramPerHectare = Unit.get_unit_division(kilogram, hectare, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramPerHectare')
    kilogramPerKilogram = Unit.get_unit_division(kilogram, kilogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramPerKilogram')
    kilogramPerCubicmetre = Unit.get_unit_division(kilogram, cubicMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramPerCubicmetre')
    kilogramPerSquareMetre = Unit.get_unit_division(kilogram, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramPerSquareMetre')
    microgramPerSquareMetreSecondTime = Unit.get_unit_division(microgram, squareMetreSecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microgramPerSquareMetreSecond-Time')
    mileStatutePerHour = Unit.get_unit_division(mileStatute, hour, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/mile-StatutePerHour')
    kilogramPerMole = Unit.get_unit_division(kilogram, mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramPerMole')
    millimetrePerDay = Unit.get_unit_division(millimetre, day, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millimetrePerDay')
    gramPerKilogram = Unit.get_unit_division(gram, kilogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerKilogram')
    tonnePerHectare = Unit.get_unit_division(tonne, hectare, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/tonnePerHectare')
    kilogramPerSecondTime = Unit.get_unit_division(kilogram, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramPerSecond-Time')
    centimetrePerDay = Unit.get_unit_division(centimetre, day, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centimetrePerDay')
    secondTimePerDay = Unit.get_unit_division(secondTime, day, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/second-TimePerDay')
    _1000ColonyFormingUnitPerMillilitre = Unit.get_unit_division(_1000ColonyFormingUnit, millilitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/_1000ColonyFormingUnitPerMillilitre')
    squareMetrePerSquareMetreDay = Unit.get_unit_division(squareMetrePerSquareMetre, day, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMetrePerSquareMetreDay')
    millisecondAnglePerYear = Unit.get_unit_division(millisecondAngle, year, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millisecond-AnglePerYear')
    euroPerTonne = Unit.get_unit_division(euro, tonne, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/euroPerTonne')
    litrePerMole = Unit.get_unit_division(litre, mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/litrePerMole')
    micromolePerMole = Unit.get_unit_division(micromole, mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micromolePerMole')
    tonnePerCubicmetre = Unit.get_unit_division(tonne, cubicMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/tonnePerCubicmetre')
    molePerKilogram = Unit.get_unit_division(mole, kilogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerKilogram')
    coulombPerKilogram = Unit.get_unit_division(coulomb, kilogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/coulombPerKilogram')
    kilogramPerLitre = Unit.get_unit_division(kilogram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramPerLitre')
    yoctogramPerLitre = Unit.get_unit_division(yoctogram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctogramPerLitre')
    nanogramPerLitre = Unit.get_unit_division(nanogram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanogramPerLitre')
    exagramPerLitre = Unit.get_unit_division(exagram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exagramPerLitre')
    femtogramPerLitre = Unit.get_unit_division(femtogram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtogramPerLitre')
    decimetrePerSecondTime = Unit.get_unit_division(decimetre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decimetrePerSecond-Time')
    yoctometrePerSecondTime = Unit.get_unit_division(yoctometre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctometrePerSecond-Time')
    molePerYoctolitre = Unit.get_unit_division(mole, yoctolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerYoctolitre')
    molePerHectolitre = Unit.get_unit_division(mole, hectolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerHectolitre')
    molePerYottalitre = Unit.get_unit_division(mole, yottalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerYottalitre')
    molePerDecalitre = Unit.get_unit_division(mole, decalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerDecalitre')
    molePerCentilitre = Unit.get_unit_division(mole, centilitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerCentilitre')
    molePerPetalitre = Unit.get_unit_division(mole, petalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerPetalitre')
    molePerNanolitre = Unit.get_unit_division(mole, nanolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerNanolitre')
    molePerKilolitre = Unit.get_unit_division(mole, kilolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerKilolitre')
    molePerTeralitre = Unit.get_unit_division(mole, teralitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerTeralitre')
    molePerPicolitre = Unit.get_unit_division(mole, picolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerPicolitre')
    gramPerKilolitre = Unit.get_unit_division(gram, kilolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerKilolitre')
    gramPerDecalitre = Unit.get_unit_division(gram, decalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerDecalitre')
    gramPerPicolitre = Unit.get_unit_division(gram, picolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerPicolitre')
    gramPerNanolitre = Unit.get_unit_division(gram, nanolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerNanolitre')
    gramPerGigalitre = Unit.get_unit_division(gram, gigalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerGigalitre')
    gramPerYottalitre = Unit.get_unit_division(gram, yottalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerYottalitre')
    gramPerCentilitre = Unit.get_unit_division(gram, centilitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerCentilitre')
    gramPerExalitre = Unit.get_unit_division(gram, exalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerExalitre')
    gramPerYoctolitre = Unit.get_unit_division(gram, yoctolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerYoctolitre')
    metrePerNanosecondTimeSquared = Unit.get_unit_division(metre, nanosecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerNanosecond-TimeSquared')
    metrePerYoctosecondTimeSquared = Unit.get_unit_division(metre, yoctosecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerYoctosecond-TimeSquared')
    metrePerZeptosecondTimeSquared = Unit.get_unit_division(metre, zeptosecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerZeptosecond-TimeSquared')
    metrePerDecasecondTimeSquared = Unit.get_unit_division(metre, decasecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerDecasecond-TimeSquared')
    metrePerZettasecondTimeSquared = Unit.get_unit_division(metre, zettasecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerZettasecond-TimeSquared')
    kilometrePerSecondTimeSquared = Unit.get_unit_division(kilometre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilometrePerSecond-TimeSquared')
    micrometrePerSecondTimeSquared = Unit.get_unit_division(micrometre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micrometrePerSecond-TimeSquared')
    decametrePerSecondTimeSquared = Unit.get_unit_division(decametre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decametrePerSecond-TimeSquared')
    molePerGigametre = Unit.get_unit_division(mole, gigametre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerGigametre')
    molePerNanometre = Unit.get_unit_division(mole, nanometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerNanometre')
    metrePerNanosecondTime = Unit.get_unit_division(metre, nanosecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerNanosecond-Time')
    metrePerYoctosecondTime = Unit.get_unit_division(metre, yoctosecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerYoctosecond-Time')
    metrePerYottasecondTime = Unit.get_unit_division(metre, yottasecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerYottasecond-Time')
    metrePerAttosecondTime = Unit.get_unit_division(metre, attosecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerAttosecond-Time')
    metrePerZeptosecondTime = Unit.get_unit_division(metre, zeptosecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerZeptosecond-Time')
    kilomolePerLitre = Unit.get_unit_division(kilomole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilomolePerLitre')
    yottamolePerLitre = Unit.get_unit_division(yottamole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottamolePerLitre')
    micromolePerLitre = Unit.get_unit_division(micromole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micromolePerLitre')
    gigamolePerLitre = Unit.get_unit_division(gigamole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigamolePerLitre')
    decimolePerLitre = Unit.get_unit_division(decimole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decimolePerLitre')
    petamolePerMetre = Unit.get_unit_division(petamole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petamolePerMetre')
    zeptomolePerMetre = Unit.get_unit_division(zeptomole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptomolePerMetre')
    centimolePerMetre = Unit.get_unit_division(centimole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centimolePerMetre')
    _25Millilitre = Unit.get_unit_multiple(millilitre, factor=25.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/_25Millilitre', label=[Literal('25 milliliter', lang='nl'), Literal('25 millilitre', lang='en')], symbol=Literal('25 ml'))
    zettamolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettamolair')
    teramolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teramolair')
    centisecondTime = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centisecond-Time')
    zeptobecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptobecquerel')
    yottahertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottahertz')
    centiampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centiampere')
    decahertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decahertz')
    kilohertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilohertz')
    picomolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picomolair')
    megatonne = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=tonne, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megatonne')
    yoctoampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctoampere')
    decicandela = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=candela, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decicandela')
    millimolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millimolair')
    zeptolitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptolitre')
    zeptomolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptomolair')
    femtobecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtobecquerel')
    hectocoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectocoulomb')
    megabecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megabecquerel')
    microlitre = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microlitre')
    centibecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centibecquerel')
    megamolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megamolair')
    femtomolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtomolair')
    zettahertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettahertz')
    exabecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exabecquerel')
    exahertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exahertz')
    centihertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centihertz')
    picohertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picohertz')
    megahertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megahertz')
    yottamolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottamolair')
    nanomolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanomolair')
    petahertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petahertz')
    zeptogram = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptogram')
    micromolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micromolair')
    attoampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attoampere')
    femtohertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtohertz')
    megaampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megaampere')
    attobecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attobecquerel')
    microbecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microbecquerel')
    nanobecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanobecquerel')
    attomolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attomolair')
    yottabecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottabecquerel')
    zeptohertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptohertz')
    hectohertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectohertz')
    zeptocoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptocoulomb')
    zettabyte = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=byte, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettabyte')
    microhertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microhertz')
    hectobecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectobecquerel')
    terabecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terabecquerel')
    examolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/examolair')
    kilotonne = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=tonne, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilotonne')
    milliampere = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milliampere')
    zettabecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettabecquerel')
    petabecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petabecquerel')
    yoctolumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctolumen')
    nanohertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanohertz')
    yoctohertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctohertz')
    yoctomolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctomolair')
    attolumen = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=lumen, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attolumen')
    millibecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millibecquerel')
    decihertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decihertz')
    centimolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centimolair')
    petamolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petamolair')
    decimolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decimolair')
    attohertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attohertz')
    gigamolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigamolair')
    decamolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decamolair')
    hectomolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectomolair')
    solarMass = Unit.get_singular_unit([Literal('zonsmassa', lang='nl'), Literal('solar mass', lang='en')], Literal('M_☉'), base_unit=kilogram, factor=1.98892e+30, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/solarMass')
    lux = Unit.get_singular_unit([Literal('lux', lang='en'), Literal('lux', lang='nl')], Literal('lx'), base_unit=lumenPerSquareMetre, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/lux')
    yardInternational = Unit.get_singular_unit([Literal('yard (international)', lang='en'), Literal('码（国际）', lang='zh')], Literal('yd'), base_unit=metre, factor=0.9144, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yard-International')
    hundredweightBritish = Unit.get_singular_unit(Literal('hundredweight (British)', lang='en'), None, base_unit=kilogram, factor=50.80235, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hundredweight-British')
    secondHourAngle = Unit.get_singular_unit([Literal('second (hour angle)', lang='en'), Literal('seconde (uurhoek)', lang='nl')], Literal('s'), base_unit=degree, factor=0.0041666667, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/second-HourAngle')
    hundredweightUS = Unit.get_singular_unit(Literal('hundredweight (US)', lang='en'), None, base_unit=kilogram, factor=45.35924, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hundredweight-US')
    yearTropical = Unit.get_singular_unit(Literal('year (tropical)', lang='en'), None, base_unit=secondTime, factor=31556930.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/year-Tropical')
    oersted = Unit.get_singular_unit(Literal('oersted', lang='en'), Literal('Oe'), base_unit=amperePerMetre, factor=79.57747, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/oersted')
    röntgen = Unit.get_singular_unit([Literal('röntgen', lang='en'), Literal('röntgen', lang='nl')], Literal('R'), base_unit=coulombPerKilogram, factor=0.000258, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/röntgen')
    poundAvoirdupois = Unit.get_singular_unit(Literal('pound (avoirdupois)', lang='en'), Literal('lb'), base_unit=kilogram, factor=0.45359237, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/poundAvoirdupois')
    gigayearCubicParsec = Unit.get_unit_multiplication(gigayear, cubicParsec, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigayearCubicParsec')
    reciprocalSquareMetreReciprocalMetre = Unit.get_unit_multiplication(reciprocalSquareMetre, reciprocalMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalSquareMetreReciprocalMetre')
    reciprocalSquareMetreReciprocalGram = Unit.get_unit_multiplication(reciprocalSquareMetre, reciprocalGram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalSquareMetreReciprocalGram')
    gigayearCubicKiloparsec = Unit.get_unit_multiplication(gigayear, cubicKiloparsec, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigayearCubicKiloparsec')
    luxSecondTime = Unit.get_unit_multiplication(lux, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/luxSecond-Time')
    terasecondTimeSquared = Unit.get_unit_exponentiation(terasecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terasecond-TimeSquared')
    decisecondTimeSquared = Unit.get_unit_exponentiation(decisecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decisecond-TimeSquared')
    yottasecondTimeSquared = Unit.get_unit_exponentiation(yottasecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottasecond-TimeSquared')
    cubicPicometre = Unit.get_unit_exponentiation(picometre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicPicometre')
    squareHectometre = Unit.get_unit_exponentiation(hectometre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareHectometre')
    squareZeptometre = Unit.get_unit_exponentiation(zeptometre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareZeptometre')
    coulombPerSquareMetre = Unit.get_unit_division(coulomb, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/coulombPerSquareMetre')
    molePerSecondTime = Unit.get_unit_division(mole, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerSecond-Time')
    gramPerSquareMetreDay = Unit.get_unit_division(gram, squareMetreDay, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerSquareMetreDay')
    solarMassPerCubicParsec = Unit.get_unit_division(solarMass, cubicParsec, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/solarMassPerCubicParsec')
    milligramPerKilogram = Unit.get_unit_division(milligram, kilogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milligramPerKilogram')
    kilogramPerHectareDay = Unit.get_unit_division(kilogram, hectareDay, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramPerHectareDay')
    cubicMetrePerKilogram = Unit.get_unit_division(cubicMetre, kilogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicMetrePerKilogram')
    megaeuroPerMegatonne = Unit.get_unit_division(megaeuro, megatonne, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megaeuroPerMegatonne')
    solarMassPerGigayearCubicKiloparsec = Unit.get_unit_division(solarMass, gigayearCubicKiloparsec, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/solarMassPerGigayearCubicKiloparsec')
    colonyFormingUnitPer25Millilitre = Unit.get_unit_division(colonyFormingUnit, _25Millilitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/colonyFormingUnitPer25Millilitre')
    metrePerDay = Unit.get_unit_division(metre, day, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerDay')
    colonyFormingUnitPerMillilitre = Unit.get_unit_division(colonyFormingUnit, millilitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/colonyFormingUnitPerMillilitre')
    solarMassPerGigayearCubicParsec = Unit.get_unit_division(solarMass, gigayearCubicParsec, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/solarMassPerGigayearCubicParsec')
    kilogramPerCubicDecimetre = Unit.get_unit_division(kilogram, cubicDecimetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramPerCubicDecimetre')
    micromolePerSecondTime = Unit.get_unit_division(micromole, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micromolePerSecond-Time')
    litrePerHour = Unit.get_unit_division(litre, hour, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/litrePerHour')
    nauticalMileInternationalPerHour = Unit.get_unit_division(nauticalMileInternational, hour, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nauticalMile-InternationalPerHour')
    centigramPerLitre = Unit.get_unit_division(centigram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centigramPerLitre')
    microgramPerLitre = Unit.get_unit_division(microgram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microgramPerLitre')
    milligramPerLitre = Unit.get_unit_division(milligram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milligramPerLitre')
    gigametrePerSecondTime = Unit.get_unit_division(gigametre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigametrePerSecond-Time')
    molePerAttolitre = Unit.get_unit_division(mole, attolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerAttolitre')
    molePerExalitre = Unit.get_unit_division(mole, exalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerExalitre')
    molePerFemtolitre = Unit.get_unit_division(mole, femtolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerFemtolitre')
    molePerDecilitre = Unit.get_unit_division(mole, decilitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerDecilitre')
    molePerMegalitre = Unit.get_unit_division(mole, megalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerMegalitre')
    gramPerMicrolitre = Unit.get_unit_division(gram, microlitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerMicrolitre')
    gramPerZeptolitre = Unit.get_unit_division(gram, zeptolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerZeptolitre')
    gramPerFemtolitre = Unit.get_unit_division(gram, femtolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerFemtolitre')
    gramPerZettalitre = Unit.get_unit_division(gram, zettalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerZettalitre')
    gramPerTeralitre = Unit.get_unit_division(gram, teralitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerTeralitre')
    gramPerDecilitre = Unit.get_unit_division(gram, decilitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerDecilitre')
    metrePerDecisecondTimeSquared = Unit.get_unit_division(metre, decisecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerDecisecond-TimeSquared')
    metrePerMicrosecondTimeSquared = Unit.get_unit_division(metre, microsecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerMicrosecond-TimeSquared')
    metrePerTerasecondTimeSquared = Unit.get_unit_division(metre, terasecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerTerasecond-TimeSquared')
    decimetrePerSecondTimeSquared = Unit.get_unit_division(decimetre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decimetrePerSecond-TimeSquared')
    molePerPicometre = Unit.get_unit_division(mole, picometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerPicometre')
    molePerKilometre = Unit.get_unit_division(mole, kilometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerKilometre')
    metrePerCentisecondTime = Unit.get_unit_division(metre, centisecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerCentisecond-Time')
    metrePerPetasecondTime = Unit.get_unit_division(metre, petasecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerPetasecond-Time')
    metrePerExasecondTime = Unit.get_unit_division(metre, exasecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerExasecond-Time')
    yoctomolePerLitre = Unit.get_unit_division(yoctomole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctomolePerLitre')
    zeptomolePerLitre = Unit.get_unit_division(zeptomole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptomolePerLitre')
    gigamolePerMetre = Unit.get_unit_division(gigamole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigamolePerMetre')
    micromolePerMetre = Unit.get_unit_division(micromole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micromolePerMetre')
    terahertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terahertz')
    gigahertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigahertz')
    attoradian = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=radian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attoradian')
    microlux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microlux')
    yoctobecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctobecquerel')
    centilux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centilux')
    yottalux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottalux')
    kilolux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilolux')
    gigabecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigabecquerel')
    attolux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attolux')
    millihertz = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millihertz')
    kilobecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilobecquerel')
    teralux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teralux')
    exalux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exalux')
    decabecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decabecquerel')
    decilux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decilux')
    nanocoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanocoulomb')
    yoctocoulomb = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctocoulomb')
    zettalux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettalux')
    decibecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decibecquerel')
    megalux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megalux')
    millilux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millilux')
    nanolux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanolux')
    picobecquerel = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=becquerel, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picobecquerel')
    decalux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decalux')
    petalux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petalux')
    yoctolux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctolux')
    hectolux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectolux')
    footcandle = Unit.get_singular_unit(Literal('footcandle', lang='en'), None, base_unit=lux, factor=10.76391, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/footcandle')
    knotInternational = Unit.get_singular_unit([Literal('knot (international)', lang='en'), Literal('海里/小时（国际）', lang='zh'), Literal('knoop (internationaal)', lang='nl')], None, base_unit=nauticalMileInternationalPerHour, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/knot-International')
    katal = Unit.get_singular_unit([Literal('katal', lang='en'), Literal('katal', lang='nl')], Literal('kat'), base_unit=molePerSecondTime, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/katal')
    phot = Unit.get_singular_unit([Literal('phot', lang='en'), Literal('phot', lang='nl')], Literal('ph'), base_unit=lux, factor=10000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/phot')
    metreKilogram = Unit.get_unit_multiplication(metre, kilogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metreKilogram')
    degreeCelsiusDay = Unit.get_unit_multiplication(degreeCelsius, day, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/degreeCelsiusDay')
    reciprocalCubicCentimetre = Unit.get_unit_exponentiation(centimetre, -3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalCubicCentimetre')
    reciprocalDegreeCelsiusDay = Unit.get_unit_exponentiation(degreeCelsiusDay, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalDegreeCelsiusDay')
    centisecondTimeSquared = Unit.get_unit_exponentiation(centisecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centisecond-TimeSquared')
    cubicGigametre = Unit.get_unit_exponentiation(gigametre, 3, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/cubicGigametre')
    microgramPerCubicCentimetre = Unit.get_unit_division(microgram, cubicCentimetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microgramPerCubicCentimetre')
    degreeCelsiusPerHour = Unit.get_unit_division(degreeCelsius, hour, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/degreeCelsiusPerHour')
    metreKilogramPerSecondTime = Unit.get_unit_division(metreKilogram, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metreKilogramPerSecond-Time')
    kilometrePerHour = Unit.get_unit_division(kilometre, hour, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilometrePerHour')
    katalPerCubicmetre = Unit.get_unit_division(katal, cubicMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/katalPerCubicmetre')
    micromolePerSecondTimeGram = Unit.get_unit_division(micromolePerSecondTime, gram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micromolePerSecond-TimeGram')
    metreKilogramPerSecondTimeSquared = Unit.get_unit_division(metreKilogram, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metreKilogramPerSecond-TimeSquared')
    attogramPerLitre = Unit.get_unit_division(attogram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attogramPerLitre')
    zeptogramPerLitre = Unit.get_unit_division(zeptogram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptogramPerLitre')
    yottametrePerSecondTime = Unit.get_unit_division(yottametre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottametrePerSecond-Time')
    molePerZettalitre = Unit.get_unit_division(mole, zettalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerZettalitre')
    molePerZeptolitre = Unit.get_unit_division(mole, zeptolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerZeptolitre')
    gramPerPetalitre = Unit.get_unit_division(gram, petalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerPetalitre')
    gramPerMegalitre = Unit.get_unit_division(gram, megalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerMegalitre')
    gramPerAttolitre = Unit.get_unit_division(gram, attolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerAttolitre')
    metrePerCentisecondTimeSquared = Unit.get_unit_division(metre, centisecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerCentisecond-TimeSquared')
    metrePerPicosecondTimeSquared = Unit.get_unit_division(metre, picosecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerPicosecond-TimeSquared')
    terametrePerSecondTimeSquared = Unit.get_unit_division(terametre, secondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terametrePerSecond-TimeSquared')
    metrePerDecasecondTime = Unit.get_unit_division(metre, decasecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerDecasecond-Time')
    metrePerKilosecondTime = Unit.get_unit_division(metre, kilosecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerKilosecond-Time')
    attomolePerLitre = Unit.get_unit_division(attomole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attomolePerLitre')
    nanomolePerMetre = Unit.get_unit_division(nanomole, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanomolePerMetre')
    gigalux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigalux')
    picolux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picolux')
    nanokatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanokatal')
    attokatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attokatal')
    megakatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megakatal')
    kilokatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilokatal')
    picokatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picokatal')
    zeptolux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptolux')
    decikatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decikatal')
    exakatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exakatal')
    terakatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terakatal')
    yoctokatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctokatal')
    femtokatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtokatal')
    petakatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petakatal')
    decakatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decakatal')
    centikatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centikatal')
    microkatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microkatal')
    zeptokatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptokatal')
    zettakatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettakatal')
    gigakatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigakatal')
    femtolux = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=lux, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtolux')
    millikatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millikatal')
    yottakatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottakatal')
    hectokatal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=katal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectokatal')
    newton = Unit.get_singular_unit([Literal('newton', lang='en'), Literal('牛顿', lang='zh'), Literal('newton', lang='nl')], Literal('N'), base_unit=metreKilogramPerSecondTimeSquared, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/newton')
    poundal = Unit.get_singular_unit(Literal('poundal', lang='en'), None, base_unit=newton, factor=0.138255, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/poundal')
    kip = Unit.get_singular_unit([Literal('kip', lang='en'), Literal('kip', lang='nl')], None, base_unit=newton, factor=4448.222, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kip')
    tonForceShort = Unit.get_singular_unit(Literal('ton-force (short)', lang='en'), None, base_unit=newton, factor=8896.443, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/ton-Force-Short')
    poundForce = Unit.get_singular_unit(Literal('pound-force', lang='en'), Literal('lbf'), base_unit=newton, factor=4.448222, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/pound-Force')
    newtonMetre = Unit.get_unit_multiplication(newton, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/newtonMetre')
    kilosecondTimeSquared = Unit.get_unit_exponentiation(kilosecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilosecond-TimeSquared')
    squareMegametre = Unit.get_unit_exponentiation(megametre, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMegametre')
    newtonPerCoulomb = Unit.get_unit_division(newton, coulomb, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/newtonPerCoulomb')
    newtonPerMetre = Unit.get_unit_division(newton, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/newtonPerMetre')
    nanokatalPerMilligram = Unit.get_unit_division(nanokatal, milligram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanokatalPerMilligram')
    newtonPerSquareMetre = Unit.get_unit_division(newton, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/newtonPerSquareMetre')
    decagramPerLitre = Unit.get_unit_division(decagram, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decagramPerLitre')
    molePerMillilitre = Unit.get_unit_division(mole, millilitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerMillilitre')
    molePerGigalitre = Unit.get_unit_division(mole, gigalitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerGigalitre')
    gramPerMillilitre = Unit.get_unit_division(gram, millilitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerMillilitre')
    metrePerYottasecondTimeSquared = Unit.get_unit_division(metre, yottasecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerYottasecond-TimeSquared')
    molePerHectometre = Unit.get_unit_division(mole, hectometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerHectometre')
    picomolePerLitre = Unit.get_unit_division(picomole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picomolePerLitre')
    kilomolair = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=molair, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilomolair')
    nanonewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanonewton')
    micronewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micronewton')
    yottanewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottanewton')
    piconewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/piconewton')
    hectonewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectonewton')
    petanewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petanewton')
    centinewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centinewton')
    giganewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/giganewton')
    zeptonewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptonewton')
    femtonewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtonewton')
    meganewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/meganewton')
    kilonewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilonewton')
    millinewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millinewton')
    zettanewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettanewton')
    decinewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decinewton')
    yoctonewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctonewton')
    attonewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attonewton')
    teranewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teranewton')
    dyne = Unit.get_singular_unit([Literal('dyne', lang='en'), Literal('dyne', lang='nl'), Literal('达因', lang='zh')], Literal('dyn'), base_unit=newton, factor=1e-05, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/dyne')
    pascal = Unit.get_singular_unit([Literal('pascal', lang='en'), Literal('pascal', lang='nl')], Literal('Pa'), base_unit=newtonPerSquareMetre, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/pascal')
    barye = Unit.get_singular_unit([Literal('barye', lang='en'), Literal('barye', lang='nl')], Literal('ba'), base_unit=pascal, factor=0.1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/barye')
    atmosphereStandard = Unit.get_singular_unit([Literal('atmosfeer (standaard)', lang='nl'), Literal('atmosphere (standard)', lang='en')], Literal('atm'), base_unit=pascal, factor=101325.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/atmosphere-Standard')
    joule = Unit.get_singular_unit([Literal('焦耳', lang='zh'), Literal('joule', lang='nl'), Literal('joule', lang='en')], Literal('J'), base_unit=newtonMetre, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/joule')
    bar = Unit.get_singular_unit([Literal('bar', lang='en'), Literal('巴（压力计量单位）', lang='zh'), Literal('bar', lang='nl')], Literal('bar'), base_unit=pascal, factor=100000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/bar')
    torr = Unit.get_singular_unit([Literal('torr', lang='nl'), Literal('torr', lang='en')], Literal('Torr'), base_unit=pascal, factor=133.322368421053, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/torr')
    footPoundal = Unit.get_singular_unit(Literal('foot poundal', lang='en'), None, base_unit=joule, factor=0.04214011, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/footPoundal')
    millinewtonMetre = Unit.get_unit_multiplication(millinewton, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millinewtonMetre')
    micronewtonMetre = Unit.get_unit_multiplication(micronewton, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micronewtonMetre')
    pascalSecondTime = Unit.get_unit_multiplication(pascal, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/pascalSecond-Time')
    pascalSecondTimeSquareMetre = Unit.get_unit_multiplication(pascalSecondTime, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/pascalSecond-TimeSquareMetre')
    reciprocalAtmosphereStandard = Unit.get_unit_exponentiation(atmosphereStandard, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalAtmosphere-Standard')
    millisecondTimeSquared = Unit.get_unit_exponentiation(millisecondTime, 2, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millisecond-TimeSquared')
    microgramPerJoule = Unit.get_unit_division(microgram, joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microgramPerJoule')
    joulePerKelvin = Unit.get_unit_division(joule, kelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/joulePerKelvin')
    joulePerSecondTime = Unit.get_unit_division(joule, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/joulePerSecond-Time')
    joulePerCubicmetre = Unit.get_unit_division(joule, cubicMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/joulePerCubicmetre')
    joulePerSquareMetre = Unit.get_unit_division(joule, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/joulePerSquareMetre')
    joulePerSquareMetreDay = Unit.get_unit_division(joule, squareMetreDay, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/joulePerSquareMetreDay')
    joulePerKelvinMole = Unit.get_unit_division(joule, kelvinMole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/joulePerKelvinMole')
    joulePerMole = Unit.get_unit_division(joule, mole, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/joulePerMole')
    joulePerCubicMetreKelvin = Unit.get_unit_division(joule, cubicMetreKelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/joulePerCubicMetreKelvin')
    joulePerKilogram = Unit.get_unit_division(joule, kilogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/joulePerKilogram')
    joulePerKelvinKilogram = Unit.get_unit_division(joule, kelvinKilogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/joulePerKelvinKilogram')
    kilogramPerPascalSecondTimeSquareMetre = Unit.get_unit_division(kilogram, pascalSecondTimeSquareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramPerPascalSecond-TimeSquareMetre')
    micrometrePerSecondTime = Unit.get_unit_division(micrometre, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micrometrePerSecond-Time')
    gramPerHectolitre = Unit.get_unit_division(gram, hectolitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerHectolitre')
    metrePerMillisecondTimeSquared = Unit.get_unit_division(metre, millisecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerMillisecond-TimeSquared')
    femtomolePerLitre = Unit.get_unit_division(femtomole, litre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtomolePerLitre')
    kilojoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilojoule')
    petapascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petapascal')
    decapascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decapascal')
    picojoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picojoule')
    hectojoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectojoule')
    centijoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centijoule')
    nanopascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanopascal')
    terajoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terajoule')
    hectopascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectopascal')
    zettapascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettapascal')
    exapascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exapascal')
    zeptojoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptojoule')
    megajoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megajoule')
    micropascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/micropascal')
    zeptopascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptopascal')
    femtojoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtojoule')
    attopascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attopascal')
    microjoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microjoule')
    femtopascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtopascal')
    decibar = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=bar, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decibar')
    exajoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exajoule')
    petajoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petajoule')
    yottapascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottapascal')
    microbar = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=bar, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microbar')
    millipascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millipascal')
    exanewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exanewton')
    centipascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centipascal')
    zettajoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettajoule')
    attojoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attojoule')
    megapascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megapascal')
    picopascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picopascal')
    yoctopascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctopascal')
    terapascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terapascal')
    millijoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millijoule')
    yoctojoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctojoule')
    gigapascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigapascal')
    decajoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decajoule')
    decipascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decipascal')
    millibar = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=bar, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millibar')
    kilopascal = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=pascal, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilopascal')
    yottajoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottajoule')
    nanojoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanojoule')
    atmosphereTechnical = Unit.get_singular_unit(Literal('atmosphere (technical)', lang='en'), Literal('at'), base_unit=pascal, factor=98066.5, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/atmosphere-Technical')
    perm0C = Unit.get_singular_unit([Literal('perm (0 °C)', lang='en'), Literal('perm (0 °C)', lang='nl')], None, base_unit=kilogramPerPascalSecondTimeSquareMetre, factor=5.72135e-11, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/perm-0C')
    calorie20C = Unit.get_singular_unit([Literal('calorie (20 °C)', lang='nl'), Literal('calorie (20 °C)', lang='en')], Literal('cal_20'), base_unit=joule, factor=4.1819, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/calorie-20C')
    BritishThermalUnit59F = Unit.get_singular_unit([Literal('British thermal unit (59 °F)', lang='en'), Literal('英国热力单位（59°F）', lang='zh')], Literal('Btu'), base_unit=joule, factor=1054.8, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/BritishThermalUnit-59F')
    calorieMean = Unit.get_singular_unit(Literal('calorie (mean)', lang='en'), Literal('cal'), base_unit=joule, factor=4.19002, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/calorie-Mean')
    BritishThermalUnitMean = Unit.get_singular_unit([Literal('英国热力单位（平均）', lang='zh'), Literal('British thermal unit (mean)', lang='en')], Literal('Btu'), base_unit=joule, factor=1055.87, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/BritishThermalUnit-Mean')
    BritishThermalUnitInternationalTable = Unit.get_singular_unit([Literal('British thermal unit (International Table)', lang='en'), Literal('英国热力单位（国际表）', lang='zh')], Literal('Btu_IT'), base_unit=joule, factor=1055.056, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/BritishThermalUnit-InternationalTable')
    tonOfTNT = Unit.get_singular_unit(Literal('ton of TNT', lang='en'), None, base_unit=joule, factor=4184000000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/tonOfTNT')
    quad = Unit.get_singular_unit(Literal('quad', lang='en'), None, base_unit=BritishThermalUnitInternationalTable, factor=1000000000000000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/quad')
    perm23C = Unit.get_singular_unit([Literal('perm (23 °C)', lang='nl'), Literal('perm (23 °C)', lang='en')], None, base_unit=kilogramPerPascalSecondTimeSquareMetre, factor=5.74525e-11, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/perm-23C')
    BritishThermalUnit60F = Unit.get_singular_unit([Literal('英国热力单位（60°F）', lang='zh'), Literal('British thermal unit (60 °F)', lang='en')], Literal('Btu'), base_unit=joule, factor=1054.68, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/BritishThermalUnit-60F')
    watt = Unit.get_singular_unit([Literal('watt', lang='nl'), Literal('watt', lang='en')], Literal('W'), base_unit=joulePerSecondTime, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/watt')
    horsepowerMetric = Unit.get_singular_unit(Literal('horsepower (metric)', lang='en'), Literal('PS'), base_unit=watt, factor=735.4988, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/horsepower-Metric')
    solarLuminosity = Unit.get_singular_unit(Literal('solar luminosity', lang='en'), Literal('L_☉'), base_unit=watt, factor=3.839e+26, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/solarLuminosity')
    BritishThermalUnitThermochemical = Unit.get_singular_unit([Literal('英国热力单位（热力化学）', lang='zh'), Literal('British thermal unit (thermochemical)', lang='en')], Literal('Btu_th'), base_unit=joule, factor=1054.35, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/BritishThermalUnit-Thermochemical')
    thermEC = Unit.get_singular_unit(Literal('therm (EC)', lang='en'), None, base_unit=joule, factor=105506000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/therm-EC')
    poise = Unit.get_singular_unit([Literal('poise', lang='nl'), Literal('poise', lang='en')], Literal('P'), base_unit=pascalSecondTime, factor=0.1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/poise')
    calorie15C = Unit.get_singular_unit([Literal('calorie (15 °C)', lang='nl'), Literal('calorie (15 °C)', lang='en')], Literal('cal_15'), base_unit=joule, factor=4.1858, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/calorie-15C')
    tonOfRefrigeration = Unit.get_singular_unit(Literal('ton of refrigeration', lang='en'), None, base_unit=watt, factor=3516.853, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/tonOfRefrigeration')
    sievert = Unit.get_singular_unit([Literal('sievert', lang='nl'), Literal('sievert', lang='en')], Literal('Sv'), base_unit=joulePerKilogram, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/sievert')
    wattSquareMetre = Unit.get_unit_multiplication(watt, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattSquareMetre')
    reciprocalWatt = Unit.get_unit_exponentiation(watt, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalWatt')
    kelvinPerWatt = Unit.get_unit_division(kelvin, watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kelvinPerWatt')
    joulePerSquareMetreSecondTime = Unit.get_unit_division(joule, squareMetreSecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/joulePerSquareMetreSecond-Time')
    wattPerSecondAngleSquared = Unit.get_unit_division(watt, secondAngleSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerSecond-AngleSquared')
    lumenPerWatt = Unit.get_unit_division(lumen, watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/lumenPerWatt')
    wattPerSquareMetreSteradian = Unit.get_unit_division(watt, squareMetreSteradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerSquareMetreSteradian')
    kilojoulePerHectogram = Unit.get_unit_division(kilojoule, hectogram, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilojoulePerHectogram')
    megajoulePerSquareMetreDay = Unit.get_unit_division(megajoule, squareMetreDay, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megajoulePerSquareMetreDay')
    wattPerSquareMetreHertz = Unit.get_unit_division(watt, squareMetreHertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerSquareMetreHertz')
    wattPerAmpere = Unit.get_unit_division(watt, ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerAmpere')
    megametrePerKilojoule = Unit.get_unit_division(megametre, kilojoule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megametrePerKilojoule')
    megajoulePerSquareMetre = Unit.get_unit_division(megajoule, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megajoulePerSquareMetre')
    wattPerSteradianSquareMetre = Unit.get_unit_division(watt, steradianSquareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerSteradianSquareMetre')
    wattPerMetreKelvin = Unit.get_unit_division(watt, metreKelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerMetreKelvin')
    squareMetreKelvinPerWatt = Unit.get_unit_division(squareMetreKelvin, watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/squareMetreKelvinPerWatt')
    wattPerHertz = Unit.get_unit_division(watt, hertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerHertz')
    wattPerSquareMetre = Unit.get_unit_division(watt, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerSquareMetre')
    wattPerNanometre = Unit.get_unit_division(watt, nanometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerNanometre')
    molePerMicrolitre = Unit.get_unit_division(mole, microlitre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/molePerMicrolitre')
    metrePerFemtosecondTime = Unit.get_unit_division(metre, femtosecondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerFemtosecond-Time')
    gigasievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigasievert')
    femtosievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtosievert')
    kilowatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilowatt')
    zettasievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettasievert')
    picowatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picowatt')
    attowatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attowatt')
    attosievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attosievert')
    centisievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centisievert')
    decasievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decasievert')
    yottawatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottawatt')
    decanewton = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=newton, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decanewton')
    millisievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millisievert')
    nanowatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanowatt')
    yottasievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottasievert')
    exawatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exawatt')
    petasievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petasievert')
    decawatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decawatt')
    megawatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megawatt')
    terasievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terasievert')
    centipoise = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=poise, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centipoise')
    milliwatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milliwatt')
    petawatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petawatt')
    exasievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exasievert')
    gigawatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigawatt')
    hectosievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectosievert')
    microsievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microsievert')
    deciwatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/deciwatt')
    gigajoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigajoule')
    zettawatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettawatt')
    microwatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microwatt')
    centiwatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centiwatt')
    terawatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terawatt')
    zeptosievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptosievert')
    yoctosievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctosievert')
    picosievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picosievert')
    kilocalorieMean = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=calorieMean, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilocalorie-Mean')
    decisievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decisievert')
    kilosievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilosievert')
    horsepowerBritish = Unit.get_singular_unit(Literal('horsepower (British)', lang='en'), None, base_unit=watt, factor=745.7, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/horsepower-British')
    calorieInternationalTable = Unit.get_singular_unit(Literal('calorie (International Table)', lang='en'), Literal('cal_IT'), base_unit=joule, factor=4.1868, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/calorie-InternationalTable')
    BritishThermalUnit39F = Unit.get_singular_unit([Literal('英国热力单位（39°F）', lang='zh'), Literal('British thermal unit (39 °F)', lang='en')], Literal('Btu'), base_unit=joule, factor=1059.67, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/BritishThermalUnit-39F')
    calorieThermochemical = Unit.get_singular_unit(Literal('calorie (thermochemical)', lang='en'), Literal('cal_th'), base_unit=joule, factor=4.184, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/calorie-Thermochemical')
    metreOfMercury = Unit.get_singular_unit([Literal('metre of mercury', lang='en'), Literal('meter kwik', lang='nl')], Literal('m Hg'), base_unit=pascal, factor=133322.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metreOfMercury')
    electronvolt = Unit.get_singular_unit([Literal('electronvolt', lang='nl'), Literal('electronvolt', lang='en'), Literal('电子伏特', lang='zh')], Literal('eV'), base_unit=joule, factor=1.602177e-19, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/electronvolt')
    horsepowerElectric = Unit.get_singular_unit(Literal('horsepower (electric)', lang='en'), None, base_unit=watt, factor=746.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/horsepower-Electric')
    gray = Unit.get_singular_unit([Literal('gray', lang='en'), Literal('gray', lang='nl')], Literal('Gy'), base_unit=joulePerKilogram, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gray')
    volt = Unit.get_singular_unit([Literal('volt', lang='nl'), Literal('volt', lang='en')], Literal('V'), base_unit=wattPerAmpere, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/volt')
    rem = Unit.get_singular_unit([Literal('rem', lang='nl'), Literal('rem', lang='en')], Literal('rem'), base_unit=sievert, factor=0.01, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/rem')
    rad = Unit.get_singular_unit([Literal('rad', lang='nl'), Literal('rad', lang='en')], Literal('rad'), base_unit=gray, factor=0.01, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/rad')
    voltSecondTime = Unit.get_unit_multiplication(volt, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/voltSecond-Time')
    jouleSecondTime = Unit.get_unit_multiplication(joule, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/jouleSecond-Time')
    kilowattHour = Unit.get_unit_multiplication(kilowatt, hour, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilowattHour')
    wattPerSteradianSquareMetreHertz = Unit.get_unit_division(watt, steradianSquareMetreHertz, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerSteradianSquareMetreHertz')
    wattPerSquareMetreNanometre = Unit.get_unit_division(watt, squareMetreNanometre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerSquareMetreNanometre')
    kilojoulePerSquareMetreDay = Unit.get_unit_division(kilojoule, squareMetreDay, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilojoulePerSquareMetreDay')
    coulombPerVolt = Unit.get_unit_division(coulomb, volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/coulombPerVolt')
    amperePerVolt = Unit.get_unit_division(ampere, volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/amperePerVolt')
    voltPerMetre = Unit.get_unit_division(volt, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/voltPerMetre')
    megaeuroPerPetajoule = Unit.get_unit_division(megaeuro, petajoule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megaeuroPerPetajoule')
    megaeuroPerMegawatt = Unit.get_unit_division(megaeuro, megawatt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megaeuroPerMegawatt')
    voltPerWatt = Unit.get_unit_division(volt, watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/voltPerWatt')
    gramPerMegajoule = Unit.get_unit_division(gram, megajoule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerMegajoule')
    exavolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exavolt')
    petavolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petavolt')
    millimetreOfMercury = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=metreOfMercury, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millimetreOfMercury')
    gigavolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigavolt')
    yoctogray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctogray')
    teravolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teravolt')
    decivolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decivolt')
    gigagray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigagray')
    hectowatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectowatt')
    centigray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centigray')
    hectogray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectogray')
    femtogray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtogray')
    yoctovolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctovolt')
    yoctowatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctowatt')
    exagray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exagray')
    megagray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megagray')
    hectovolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectovolt')
    kiloelectronvolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=electronvolt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kiloelectronvolt')
    megavolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megavolt')
    microgray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microgray')
    microvolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microvolt')
    centimetreOfMercury = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=metreOfMercury, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centimetreOfMercury')
    attogray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attogray')
    kilovolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilovolt')
    zeptovolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptovolt')
    teragray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teragray')
    gigaelectronvolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=electronvolt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigaelectronvolt')
    zettagray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettagray')
    zeptogray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptogray')
    milligray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milligray')
    zeptowatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptowatt')
    nanovolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanovolt')
    megaelectronvolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=electronvolt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megaelectronvolt')
    decijoule = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decijoule')
    nanogray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanogray')
    picogray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picogray')
    petagray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petagray')
    femtovolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtovolt')
    centivolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centivolt')
    decigray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decigray')
    yottagray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottagray')
    thermUS = Unit.get_singular_unit(Literal('therm (US)', lang='en'), None, base_unit=joule, factor=105480400.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/therm-US')
    farad = Unit.get_singular_unit([Literal('farad', lang='en'), Literal('farad', lang='nl')], Literal('F'), base_unit=coulombPerVolt, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/farad')
    abvolt = Unit.get_singular_unit([Literal('abvolt', lang='nl'), Literal('abvolt', lang='en')], Literal('abV'), base_unit=volt, factor=1e-08, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/abvolt')
    erg = Unit.get_singular_unit([Literal('尔格', lang='zh'), Literal('erg', lang='nl'), Literal('erg', lang='en')], Literal('erg'), base_unit=joule, factor=1e-07, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/erg')
    horsepowerWater = Unit.get_singular_unit(Literal('horsepower (water)', lang='en'), None, base_unit=watt, factor=746.043, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/horsepower-Water')
    statvolt = Unit.get_singular_unit([Literal('statvolt', lang='nl'), Literal('statvolt', lang='en')], Literal('statV'), base_unit=volt, factor=299.7925, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/statvolt')
    statfarad = Unit.get_singular_unit([Literal('statfarad', lang='en'), Literal('statfarad', lang='nl')], Literal('statF'), base_unit=farad, factor=1.11265e-12, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/statfarad')
    horsepowerBoiler = Unit.get_singular_unit(Literal('horsepower (boiler)', lang='en'), None, base_unit=watt, factor=9809.5, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/horsepower-Boiler')
    wattHour = Unit.get_unit_multiplication(watt, hour, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattHour')
    ergSecondTime = Unit.get_unit_multiplication(erg, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/ergSecond-Time')
    amperePerWatt = Unit.get_unit_division(ampere, watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/amperePerWatt')
    kilogramPerGigajoule = Unit.get_unit_division(kilogram, gigajoule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogramPerGigajoule')
    wattPerCubicmetre = Unit.get_unit_division(watt, cubicMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerCubicmetre')
    wattPerSteradian = Unit.get_unit_division(watt, steradian, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerSteradian')
    gramPerJoule = Unit.get_unit_division(gram, joule, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gramPerJoule')
    metrePerKilosecondTimeSquared = Unit.get_unit_division(metre, kilosecondTimeSquared, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/metrePerKilosecond-TimeSquared')
    gigafarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigafarad')
    nanofarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanofarad')
    kilofarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilofarad')
    femtowatt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=watt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtowatt')
    microfarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microfarad')
    femtofarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtofarad')
    centifarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centifarad')
    zettafarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettafarad')
    exafarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exafarad')
    decifarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decifarad')
    yottavolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottavolt')
    zeptofarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptofarad')
    zettavolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettavolt')
    megafarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megafarad')
    hectofarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectofarad')
    decafarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decafarad')
    petafarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petafarad')
    attovolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attovolt')
    attofarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attofarad')
    yottafarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottafarad')
    picofarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picofarad')
    megaerg = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=erg, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megaerg')
    millivolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millivolt')
    nanosievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanosievert')
    megasievert = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=sievert, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megasievert')
    picovolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picovolt')
    kilogray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilogray')
    abfarad = Unit.get_singular_unit([Literal('abfarad', lang='en'), Literal('abfarad', lang='nl')], Literal('abF'), base_unit=farad, factor=1000000000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/abfarad')
    weber = Unit.get_singular_unit([Literal('weber', lang='en'), Literal('weber', lang='nl')], Literal('Wb'), base_unit=voltSecondTime, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/weber')
    maxwell = Unit.get_singular_unit([Literal('maxwell', lang='en'), Literal('maxwell', lang='nl')], Literal('Mx'), base_unit=weber, factor=1e-08, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/maxwell')
    siemens = Unit.get_singular_unit([Literal('siemens', lang='nl'), Literal('siemens', lang='en')], Literal('S'), base_unit=amperePerVolt, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/siemens')
    abmho = Unit.get_singular_unit([Literal('abmho', lang='en'), Literal('abmho', lang='nl')], None, base_unit=siemens, factor=1000000000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/abmho')
    reciprocalPascalSecondTime = Unit.get_unit_exponentiation(pascalSecondTime, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalPascalSecond-Time')
    voltPerAmpere = Unit.get_unit_division(volt, ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/voltPerAmpere')
    siemensPerMetre = Unit.get_unit_division(siemens, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/siemensPerMetre')
    grayPerSecondTime = Unit.get_unit_division(gray, secondTime, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/grayPerSecond-Time')
    weberPerAmpere = Unit.get_unit_division(weber, ampere, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/weberPerAmpere')
    centisiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centisiemens')
    nanoweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanoweber')
    microweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microweber')
    kilosiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilosiemens')
    yoctosiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctosiemens')
    picosiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picosiemens')
    picoweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picoweber')
    hectosiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectosiemens')
    microsiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microsiemens')
    terasiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terasiemens')
    gigasiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigasiemens')
    decasiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decasiemens')
    milliweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milliweber')
    femtoweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtoweber')
    femtosiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtosiemens')
    megaweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megaweber')
    zeptoweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptoweber')
    yoctofarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctofarad')
    decisiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decisiemens')
    decavolt = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=volt, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decavolt')
    petasiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petasiemens')
    exaweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exaweber')
    kiloweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kiloweber')
    megasiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megasiemens')
    attoweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attoweber')
    decaweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decaweber')
    nanosiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanosiemens')
    zettaweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettaweber')
    petaweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petaweber')
    decagray = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=gray, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decagray')
    millifarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millifarad')
    rhe = Unit.get_singular_unit([Literal('rhe', lang='nl'), Literal('rhe', lang='en')], None, base_unit=reciprocalPascalSecondTime, factor=10.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/rhe')
    statmho = Unit.get_singular_unit([Literal('statmho', lang='en'), Literal('statmho', lang='nl')], None, base_unit=siemens, factor=1.11265e-12, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/statmho')
    ohm = Unit.get_singular_unit([Literal('ohm', lang='nl'), Literal('ohm', lang='en')], Literal('Ω'), base_unit=voltPerAmpere, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/ohm')
    unitPole = Unit.get_singular_unit(Literal('unit pole', lang='en'), None, base_unit=weber, factor=1.256637e-07, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/unitPole')
    terawattHour = Unit.get_unit_multiplication(terawatt, hour, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terawattHour')
    weberPerSquareMetre = Unit.get_unit_division(weber, squareMetre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/weberPerSquareMetre')
    wattPerSquareMetreKelvin = Unit.get_unit_division(watt, squareMetreKelvin, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/wattPerSquareMetreKelvin')
    megohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megohm')
    terafarad = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=farad, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terafarad')
    zeptosiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptosiemens')
    gigaohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigaohm')
    yottaweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottaweber')
    hectoohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectoohm')
    zettaohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettaohm')
    yoctoohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctoohm')
    deciweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/deciweber')
    teraweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teraweber')
    yoctoweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctoweber')
    zettasiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettasiemens')
    decaohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decaohm')
    microohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microohm')
    nanoohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanoohm')
    milliohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milliohm')
    gigaweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigaweber')
    kilohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilohm')
    petaohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petaohm')
    picoohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picoohm')
    exaohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exaohm')
    statweber = Unit.get_singular_unit([Literal('statweber', lang='nl'), Literal('statweber', lang='en')], Literal('statWb'), base_unit=weber, factor=299.79, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/statweber')
    statohm = Unit.get_singular_unit([Literal('statohm', lang='en'), Literal('statohm', lang='nl')], Literal('statΩ'), base_unit=ohm, factor=898755200000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/statohm')
    abohm = Unit.get_singular_unit([Literal('abohm', lang='nl'), Literal('abohm', lang='en')], Literal('abΩ'), base_unit=ohm, factor=1e-09, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/abohm')
    tesla = Unit.get_singular_unit([Literal('tesla', lang='en'), Literal('tesla', lang='nl')], Literal('T'), base_unit=weberPerSquareMetre, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/tesla')
    ohmMetre = Unit.get_unit_multiplication(ohm, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/ohmMetre')
    faradPerMetre = Unit.get_unit_division(farad, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/faradPerMetre')
    femtotesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtotesla')
    yottatesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottatesla')
    exatesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exatesla')
    attoohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attoohm')
    attotesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attotesla')
    yottasiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottasiemens')
    millisiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millisiemens')
    yottaohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottaohm')
    nanotesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanotesla')
    zeptotesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptotesla')
    hectotesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectotesla')
    centiweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centiweber')
    decitesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decitesla')
    kilotesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilotesla')
    femtoohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtoohm')
    gigatesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigatesla')
    megatesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megatesla')
    millitesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millitesla')
    decatesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decatesla')
    centitesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centitesla')
    gamma = Unit.get_singular_unit([Literal('gamma', lang='en'), Literal('gamma', lang='nl')], Literal('γ'), base_unit=tesla, factor=1e-09, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gamma')
    mho = Unit.get_singular_unit([Literal('mho', lang='en'), Literal('mho', lang='nl')], None, base_unit=siemens, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/mho')
    henry = Unit.get_singular_unit([Literal('henry', lang='nl'), Literal('henry', lang='en')], Literal('H'), base_unit=weberPerAmpere, factor=1.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/henry')
    abhenry = Unit.get_singular_unit([Literal('abhenry', lang='en'), Literal('abhenry', lang='nl')], Literal('abH'), base_unit=henry, factor=1e-09, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/abhenry')
    henryPerMetre = Unit.get_unit_division(henry, metre, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/henryPerMetre')
    decahenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deca', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decahenry')
    centihenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centihenry')
    yoctotesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctotesla')
    centiohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/centi', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/centiohm')
    nanohenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/nano', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/nanohenry')
    petatesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petatesla')
    femtohenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/femto', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/femtohenry')
    hectohenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectohenry')
    yottahenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yotta', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yottahenry')
    hectoweber = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/hecto', base_unit=weber, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/hectoweber')
    terahenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/terahenry')
    deciohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/deciohm')
    exasiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exasiemens')
    millihenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/millihenry')
    exahenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/exa', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/exahenry')
    petahenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/peta', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/petahenry')
    stattesla = Unit.get_singular_unit([Literal('stattesla', lang='nl'), Literal('stattesla', lang='en')], Literal('statT'), base_unit=tesla, factor=2997900.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/stattesla')
    gauss = Unit.get_singular_unit([Literal('gauss', lang='nl'), Literal('gauss', lang='en')], Literal('G'), base_unit=tesla, factor=0.0001, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gauss')
    teratesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teratesla')
    zeptoohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptoohm')
    microhenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microhenry')
    zettatesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettatesla')
    attosiemens = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=siemens, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attosiemens')
    teraohm = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/tera', base_unit=ohm, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/teraohm')
    milligauss = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/milli', base_unit=gauss, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/milligauss')
    attohenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/atto', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/attohenry')
    picohenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picohenry')
    stathenry = Unit.get_singular_unit([Literal('stathenry', lang='en'), Literal('stathenry', lang='nl')], Literal('statH'), base_unit=henry, factor=898755200000.0, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/stathenry')
    zeptohenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zepto', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zeptohenry')
    gigahenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/giga', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/gigahenry')
    zettahenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/zetta', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/zettahenry')
    megahenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/mega', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/megahenry')
    kilohenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/kilo', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/kilohenry')
    reciprocalHenry = Unit.get_unit_exponentiation(henry, -1, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/reciprocalHenry')
    yoctohenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/yocto', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/yoctohenry')
    decihenry = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/deci', base_unit=henry, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/decihenry')
    microtesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/micro', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/microtesla')
    picotesla = Unit.get_prefixed_unit('http://www.ontology-of-units-of-measure.org/resource/om-2/pico', base_unit=tesla, identifier='http://www.ontology-of-units-of-measure.org/resource/om-2/picotesla')
